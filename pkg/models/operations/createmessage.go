// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/openai-go-sdk/v4/pkg/models/shared"
	"net/http"
)

type CreateMessageRequest struct {
	CreateMessageRequest shared.CreateMessageRequest `request:"mediaType=application/json"`
	// The ID of the [thread](/docs/api-reference/threads) to create a message for.
	ThreadID string `pathParam:"style=simple,explode=false,name=thread_id"`
}

func (o *CreateMessageRequest) GetCreateMessageRequest() shared.CreateMessageRequest {
	if o == nil {
		return shared.CreateMessageRequest{}
	}
	return o.CreateMessageRequest
}

func (o *CreateMessageRequest) GetThreadID() string {
	if o == nil {
		return ""
	}
	return o.ThreadID
}

type CreateMessageResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	MessageObject *shared.MessageObject
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateMessageResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateMessageResponse) GetMessageObject() *shared.MessageObject {
	if o == nil {
		return nil
	}
	return o.MessageObject
}

func (o *CreateMessageResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateMessageResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
