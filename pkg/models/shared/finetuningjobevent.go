// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Level string

const (
	LevelInfo  Level = "info"
	LevelWarn  Level = "warn"
	LevelError Level = "error"
)

func (e Level) ToPointer() *Level {
	return &e
}

func (e *Level) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		*e = Level(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Level: %v", v)
	}
}

type FineTuningJobEventObject string

const (
	FineTuningJobEventObjectFineTuningJobEvent FineTuningJobEventObject = "fine_tuning.job.event"
)

func (e FineTuningJobEventObject) ToPointer() *FineTuningJobEventObject {
	return &e
}

func (e *FineTuningJobEventObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fine_tuning.job.event":
		*e = FineTuningJobEventObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FineTuningJobEventObject: %v", v)
	}
}

// FineTuningJobEvent - Fine-tuning job event object
type FineTuningJobEvent struct {
	CreatedAt int64                    `json:"created_at"`
	ID        string                   `json:"id"`
	Level     Level                    `json:"level"`
	Message   string                   `json:"message"`
	Object    FineTuningJobEventObject `json:"object"`
}

func (o *FineTuningJobEvent) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *FineTuningJobEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FineTuningJobEvent) GetLevel() Level {
	if o == nil {
		return Level("")
	}
	return o.Level
}

func (o *FineTuningJobEvent) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *FineTuningJobEvent) GetObject() FineTuningJobEventObject {
	if o == nil {
		return FineTuningJobEventObject("")
	}
	return o.Object
}
