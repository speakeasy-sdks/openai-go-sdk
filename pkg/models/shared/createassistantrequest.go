// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// CreateAssistantRequestMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
type CreateAssistantRequestMetadata struct {
}

type CreateAssistantRequestToolsType string

const (
	CreateAssistantRequestToolsTypeAssistantToolsCode      CreateAssistantRequestToolsType = "AssistantToolsCode"
	CreateAssistantRequestToolsTypeAssistantToolsRetrieval CreateAssistantRequestToolsType = "AssistantToolsRetrieval"
	CreateAssistantRequestToolsTypeAssistantToolsFunction  CreateAssistantRequestToolsType = "AssistantToolsFunction"
)

type CreateAssistantRequestTools struct {
	AssistantToolsCode      *AssistantToolsCode
	AssistantToolsRetrieval *AssistantToolsRetrieval
	AssistantToolsFunction  *AssistantToolsFunction

	Type CreateAssistantRequestToolsType
}

func CreateCreateAssistantRequestToolsAssistantToolsCode(assistantToolsCode AssistantToolsCode) CreateAssistantRequestTools {
	typ := CreateAssistantRequestToolsTypeAssistantToolsCode

	return CreateAssistantRequestTools{
		AssistantToolsCode: &assistantToolsCode,
		Type:               typ,
	}
}

func CreateCreateAssistantRequestToolsAssistantToolsRetrieval(assistantToolsRetrieval AssistantToolsRetrieval) CreateAssistantRequestTools {
	typ := CreateAssistantRequestToolsTypeAssistantToolsRetrieval

	return CreateAssistantRequestTools{
		AssistantToolsRetrieval: &assistantToolsRetrieval,
		Type:                    typ,
	}
}

func CreateCreateAssistantRequestToolsAssistantToolsFunction(assistantToolsFunction AssistantToolsFunction) CreateAssistantRequestTools {
	typ := CreateAssistantRequestToolsTypeAssistantToolsFunction

	return CreateAssistantRequestTools{
		AssistantToolsFunction: &assistantToolsFunction,
		Type:                   typ,
	}
}

func (u *CreateAssistantRequestTools) UnmarshalJSON(data []byte) error {

	assistantToolsCode := AssistantToolsCode{}
	if err := utils.UnmarshalJSON(data, &assistantToolsCode, "", true, true); err == nil {
		u.AssistantToolsCode = &assistantToolsCode
		u.Type = CreateAssistantRequestToolsTypeAssistantToolsCode
		return nil
	}

	assistantToolsRetrieval := AssistantToolsRetrieval{}
	if err := utils.UnmarshalJSON(data, &assistantToolsRetrieval, "", true, true); err == nil {
		u.AssistantToolsRetrieval = &assistantToolsRetrieval
		u.Type = CreateAssistantRequestToolsTypeAssistantToolsRetrieval
		return nil
	}

	assistantToolsFunction := AssistantToolsFunction{}
	if err := utils.UnmarshalJSON(data, &assistantToolsFunction, "", true, true); err == nil {
		u.AssistantToolsFunction = &assistantToolsFunction
		u.Type = CreateAssistantRequestToolsTypeAssistantToolsFunction
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateAssistantRequestTools) MarshalJSON() ([]byte, error) {
	if u.AssistantToolsCode != nil {
		return utils.MarshalJSON(u.AssistantToolsCode, "", true)
	}

	if u.AssistantToolsRetrieval != nil {
		return utils.MarshalJSON(u.AssistantToolsRetrieval, "", true)
	}

	if u.AssistantToolsFunction != nil {
		return utils.MarshalJSON(u.AssistantToolsFunction, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateAssistantRequest struct {
	// The description of the assistant. The maximum length is 512 characters.
	//
	Description *string `json:"description,omitempty"`
	// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	//
	FileIds []string `json:"file_ids,omitempty"`
	// The system instructions that the assistant uses. The maximum length is 32768 characters.
	//
	Instructions *string `json:"instructions,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	//
	Metadata *CreateAssistantRequestMetadata `json:"metadata,omitempty"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	//
	Model string `json:"model"`
	// The name of the assistant. The maximum length is 256 characters.
	//
	Name *string `json:"name,omitempty"`
	// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
	//
	Tools []CreateAssistantRequestTools `json:"tools,omitempty"`
}

func (o *CreateAssistantRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateAssistantRequest) GetFileIds() []string {
	if o == nil {
		return nil
	}
	return o.FileIds
}

func (o *CreateAssistantRequest) GetInstructions() *string {
	if o == nil {
		return nil
	}
	return o.Instructions
}

func (o *CreateAssistantRequest) GetMetadata() *CreateAssistantRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateAssistantRequest) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *CreateAssistantRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateAssistantRequest) GetTools() []CreateAssistantRequestTools {
	if o == nil {
		return nil
	}
	return o.Tools
}
