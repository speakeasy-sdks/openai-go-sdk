// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

type Function struct {
	// The name of the function to call.
	Name string `json:"name"`
}

func (o *Function) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// SchemasChatCompletionNamedToolChoiceType - The type of the tool. Currently, only `function` is supported.
type SchemasChatCompletionNamedToolChoiceType string

const (
	SchemasChatCompletionNamedToolChoiceTypeFunction SchemasChatCompletionNamedToolChoiceType = "function"
)

func (e SchemasChatCompletionNamedToolChoiceType) ToPointer() *SchemasChatCompletionNamedToolChoiceType {
	return &e
}

func (e *SchemasChatCompletionNamedToolChoiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = SchemasChatCompletionNamedToolChoiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasChatCompletionNamedToolChoiceType: %v", v)
	}
}

// ChatCompletionNamedToolChoiceSchemas - Specifies a tool the model should use. Use to force the model to call a specific function.
type ChatCompletionNamedToolChoiceSchemas struct {
	Function Function `json:"function"`
	// The type of the tool. Currently, only `function` is supported.
	Type SchemasChatCompletionNamedToolChoiceType `json:"type"`
}

func (o *ChatCompletionNamedToolChoiceSchemas) GetFunction() Function {
	if o == nil {
		return Function{}
	}
	return o.Function
}

func (o *ChatCompletionNamedToolChoiceSchemas) GetType() SchemasChatCompletionNamedToolChoiceType {
	if o == nil {
		return SchemasChatCompletionNamedToolChoiceType("")
	}
	return o.Type
}

// ChatCompletionToolChoiceOption1 - `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type ChatCompletionToolChoiceOption1 string

const (
	ChatCompletionToolChoiceOption1None ChatCompletionToolChoiceOption1 = "none"
	ChatCompletionToolChoiceOption1Auto ChatCompletionToolChoiceOption1 = "auto"
)

func (e ChatCompletionToolChoiceOption1) ToPointer() *ChatCompletionToolChoiceOption1 {
	return &e
}

func (e *ChatCompletionToolChoiceOption1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		*e = ChatCompletionToolChoiceOption1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionToolChoiceOption1: %v", v)
	}
}

type ChatCompletionToolChoiceOptionType string

const (
	ChatCompletionToolChoiceOptionTypeChatCompletionToolChoiceOption1      ChatCompletionToolChoiceOptionType = "ChatCompletionToolChoiceOption_1"
	ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoiceSchemas ChatCompletionToolChoiceOptionType = "ChatCompletionNamedToolChoice_Schemas"
)

type ChatCompletionToolChoiceOption struct {
	ChatCompletionToolChoiceOption1      *ChatCompletionToolChoiceOption1
	ChatCompletionNamedToolChoiceSchemas *ChatCompletionNamedToolChoiceSchemas

	Type ChatCompletionToolChoiceOptionType
}

func CreateChatCompletionToolChoiceOptionChatCompletionToolChoiceOption1(chatCompletionToolChoiceOption1 ChatCompletionToolChoiceOption1) ChatCompletionToolChoiceOption {
	typ := ChatCompletionToolChoiceOptionTypeChatCompletionToolChoiceOption1

	return ChatCompletionToolChoiceOption{
		ChatCompletionToolChoiceOption1: &chatCompletionToolChoiceOption1,
		Type:                            typ,
	}
}

func CreateChatCompletionToolChoiceOptionChatCompletionNamedToolChoiceSchemas(chatCompletionNamedToolChoiceSchemas ChatCompletionNamedToolChoiceSchemas) ChatCompletionToolChoiceOption {
	typ := ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoiceSchemas

	return ChatCompletionToolChoiceOption{
		ChatCompletionNamedToolChoiceSchemas: &chatCompletionNamedToolChoiceSchemas,
		Type:                                 typ,
	}
}

func (u *ChatCompletionToolChoiceOption) UnmarshalJSON(data []byte) error {

	chatCompletionNamedToolChoiceSchemas := ChatCompletionNamedToolChoiceSchemas{}
	if err := utils.UnmarshalJSON(data, &chatCompletionNamedToolChoiceSchemas, "", true, true); err == nil {
		u.ChatCompletionNamedToolChoiceSchemas = &chatCompletionNamedToolChoiceSchemas
		u.Type = ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoiceSchemas
		return nil
	}

	chatCompletionToolChoiceOption1 := ChatCompletionToolChoiceOption1("")
	if err := utils.UnmarshalJSON(data, &chatCompletionToolChoiceOption1, "", true, true); err == nil {
		u.ChatCompletionToolChoiceOption1 = &chatCompletionToolChoiceOption1
		u.Type = ChatCompletionToolChoiceOptionTypeChatCompletionToolChoiceOption1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ChatCompletionToolChoiceOption) MarshalJSON() ([]byte, error) {
	if u.ChatCompletionToolChoiceOption1 != nil {
		return utils.MarshalJSON(u.ChatCompletionToolChoiceOption1, "", true)
	}

	if u.ChatCompletionNamedToolChoiceSchemas != nil {
		return utils.MarshalJSON(u.ChatCompletionNamedToolChoiceSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
