// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// One - `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
type One string

const (
	OneNone One = "none"
	OneAuto One = "auto"
)

func (e One) ToPointer() *One {
	return &e
}

func (e *One) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "auto":
		*e = One(v)
		return nil
	default:
		return fmt.Errorf("invalid value for One: %v", v)
	}
}

type ChatCompletionToolChoiceOptionType string

const (
	ChatCompletionToolChoiceOptionTypeOne                           ChatCompletionToolChoiceOptionType = "1"
	ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoice ChatCompletionToolChoiceOptionType = "ChatCompletionNamedToolChoice"
)

// ChatCompletionToolChoiceOption - Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
//
// `none` is the default when no functions are present. `auto` is the default if functions are present.
type ChatCompletionToolChoiceOption struct {
	One                           *One
	ChatCompletionNamedToolChoice *ChatCompletionNamedToolChoice

	Type ChatCompletionToolChoiceOptionType
}

func CreateChatCompletionToolChoiceOptionOne(one One) ChatCompletionToolChoiceOption {
	typ := ChatCompletionToolChoiceOptionTypeOne

	return ChatCompletionToolChoiceOption{
		One:  &one,
		Type: typ,
	}
}

func CreateChatCompletionToolChoiceOptionChatCompletionNamedToolChoice(chatCompletionNamedToolChoice ChatCompletionNamedToolChoice) ChatCompletionToolChoiceOption {
	typ := ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoice

	return ChatCompletionToolChoiceOption{
		ChatCompletionNamedToolChoice: &chatCompletionNamedToolChoice,
		Type:                          typ,
	}
}

func (u *ChatCompletionToolChoiceOption) UnmarshalJSON(data []byte) error {

	chatCompletionNamedToolChoice := ChatCompletionNamedToolChoice{}
	if err := utils.UnmarshalJSON(data, &chatCompletionNamedToolChoice, "", true, true); err == nil {
		u.ChatCompletionNamedToolChoice = &chatCompletionNamedToolChoice
		u.Type = ChatCompletionToolChoiceOptionTypeChatCompletionNamedToolChoice
		return nil
	}

	one := One("")
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = ChatCompletionToolChoiceOptionTypeOne
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ChatCompletionToolChoiceOption) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.ChatCompletionNamedToolChoice != nil {
		return utils.MarshalJSON(u.ChatCompletionNamedToolChoice, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
