// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// RunStepObjectCode - One of `server_error` or `rate_limit_exceeded`.
type RunStepObjectCode string

const (
	RunStepObjectCodeServerError       RunStepObjectCode = "server_error"
	RunStepObjectCodeRateLimitExceeded RunStepObjectCode = "rate_limit_exceeded"
)

func (e RunStepObjectCode) ToPointer() *RunStepObjectCode {
	return &e
}

func (e *RunStepObjectCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server_error":
		fallthrough
	case "rate_limit_exceeded":
		*e = RunStepObjectCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepObjectCode: %v", v)
	}
}

// RunStepObjectLastError - The last error associated with this run step. Will be `null` if there are no errors.
type RunStepObjectLastError struct {
	// One of `server_error` or `rate_limit_exceeded`.
	Code RunStepObjectCode `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

func (o *RunStepObjectLastError) GetCode() RunStepObjectCode {
	if o == nil {
		return RunStepObjectCode("")
	}
	return o.Code
}

func (o *RunStepObjectLastError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// RunStepObjectMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
type RunStepObjectMetadata struct {
}

// RunStepObjectObject - The object type, which is always `thread.run.step`.
type RunStepObjectObject string

const (
	RunStepObjectObjectThreadRunStep RunStepObjectObject = "thread.run.step"
)

func (e RunStepObjectObject) ToPointer() *RunStepObjectObject {
	return &e
}

func (e *RunStepObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "thread.run.step":
		*e = RunStepObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepObjectObject: %v", v)
	}
}

// RunStepObjectStatus - The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
type RunStepObjectStatus string

const (
	RunStepObjectStatusInProgress RunStepObjectStatus = "in_progress"
	RunStepObjectStatusCancelled  RunStepObjectStatus = "cancelled"
	RunStepObjectStatusFailed     RunStepObjectStatus = "failed"
	RunStepObjectStatusCompleted  RunStepObjectStatus = "completed"
	RunStepObjectStatusExpired    RunStepObjectStatus = "expired"
)

func (e RunStepObjectStatus) ToPointer() *RunStepObjectStatus {
	return &e
}

func (e *RunStepObjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_progress":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "completed":
		fallthrough
	case "expired":
		*e = RunStepObjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepObjectStatus: %v", v)
	}
}

type StepDetailsType string

const (
	StepDetailsTypeRunStepDetailsMessageCreationObject StepDetailsType = "RunStepDetailsMessageCreationObject"
	StepDetailsTypeRunStepDetailsToolCallsObject       StepDetailsType = "RunStepDetailsToolCallsObject"
)

// StepDetails - The details of the run step.
type StepDetails struct {
	RunStepDetailsMessageCreationObject *RunStepDetailsMessageCreationObject
	RunStepDetailsToolCallsObject       *RunStepDetailsToolCallsObject

	Type StepDetailsType
}

func CreateStepDetailsRunStepDetailsMessageCreationObject(runStepDetailsMessageCreationObject RunStepDetailsMessageCreationObject) StepDetails {
	typ := StepDetailsTypeRunStepDetailsMessageCreationObject

	return StepDetails{
		RunStepDetailsMessageCreationObject: &runStepDetailsMessageCreationObject,
		Type:                                typ,
	}
}

func CreateStepDetailsRunStepDetailsToolCallsObject(runStepDetailsToolCallsObject RunStepDetailsToolCallsObject) StepDetails {
	typ := StepDetailsTypeRunStepDetailsToolCallsObject

	return StepDetails{
		RunStepDetailsToolCallsObject: &runStepDetailsToolCallsObject,
		Type:                          typ,
	}
}

func (u *StepDetails) UnmarshalJSON(data []byte) error {

	runStepDetailsMessageCreationObject := RunStepDetailsMessageCreationObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsMessageCreationObject, "", true, true); err == nil {
		u.RunStepDetailsMessageCreationObject = &runStepDetailsMessageCreationObject
		u.Type = StepDetailsTypeRunStepDetailsMessageCreationObject
		return nil
	}

	runStepDetailsToolCallsObject := RunStepDetailsToolCallsObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsObject = &runStepDetailsToolCallsObject
		u.Type = StepDetailsTypeRunStepDetailsToolCallsObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u StepDetails) MarshalJSON() ([]byte, error) {
	if u.RunStepDetailsMessageCreationObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsMessageCreationObject, "", true)
	}

	if u.RunStepDetailsToolCallsObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RunStepObjectType - The type of run step, which can be either `message_creation` or `tool_calls`.
type RunStepObjectType string

const (
	RunStepObjectTypeMessageCreation RunStepObjectType = "message_creation"
	RunStepObjectTypeToolCalls       RunStepObjectType = "tool_calls"
)

func (e RunStepObjectType) ToPointer() *RunStepObjectType {
	return &e
}

func (e *RunStepObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "message_creation":
		fallthrough
	case "tool_calls":
		*e = RunStepObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepObjectType: %v", v)
	}
}

// RunStepObject - Represents a step in execution of a run.
type RunStepObject struct {
	// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
	AssistantID string `json:"assistant_id"`
	// The Unix timestamp (in seconds) for when the run step was cancelled.
	CancelledAt *int64 `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run step completed.
	CompletedAt *int64 `json:"completed_at"`
	// The Unix timestamp (in seconds) for when the run step was created.
	CreatedAt int64 `json:"created_at"`
	// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
	ExpiredAt *int64 `json:"expired_at"`
	// The Unix timestamp (in seconds) for when the run step failed.
	FailedAt *int64 `json:"failed_at"`
	// The identifier of the run step, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The last error associated with this run step. Will be `null` if there are no errors.
	LastError *RunStepObjectLastError `json:"last_error"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	//
	Metadata *RunStepObjectMetadata `json:"metadata"`
	// The object type, which is always `thread.run.step`.
	Object RunStepObjectObject `json:"object"`
	// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
	RunID string `json:"run_id"`
	// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
	Status RunStepObjectStatus `json:"status"`
	// The details of the run step.
	StepDetails StepDetails `json:"step_details"`
	// The ID of the [thread](/docs/api-reference/threads) that was run.
	ThreadID string `json:"thread_id"`
	// The type of run step, which can be either `message_creation` or `tool_calls`.
	Type RunStepObjectType `json:"type"`
	// Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
	Usage *RunStepCompletionUsage `json:"usage"`
}

func (o *RunStepObject) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *RunStepObject) GetCancelledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *RunStepObject) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *RunStepObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *RunStepObject) GetExpiredAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiredAt
}

func (o *RunStepObject) GetFailedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *RunStepObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunStepObject) GetLastError() *RunStepObjectLastError {
	if o == nil {
		return nil
	}
	return o.LastError
}

func (o *RunStepObject) GetMetadata() *RunStepObjectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *RunStepObject) GetObject() RunStepObjectObject {
	if o == nil {
		return RunStepObjectObject("")
	}
	return o.Object
}

func (o *RunStepObject) GetRunID() string {
	if o == nil {
		return ""
	}
	return o.RunID
}

func (o *RunStepObject) GetStatus() RunStepObjectStatus {
	if o == nil {
		return RunStepObjectStatus("")
	}
	return o.Status
}

func (o *RunStepObject) GetStepDetails() StepDetails {
	if o == nil {
		return StepDetails{}
	}
	return o.StepDetails
}

func (o *RunStepObject) GetThreadID() string {
	if o == nil {
		return ""
	}
	return o.ThreadID
}

func (o *RunStepObject) GetType() RunStepObjectType {
	if o == nil {
		return RunStepObjectType("")
	}
	return o.Type
}

func (o *RunStepObject) GetUsage() *RunStepCompletionUsage {
	if o == nil {
		return nil
	}
	return o.Usage
}
