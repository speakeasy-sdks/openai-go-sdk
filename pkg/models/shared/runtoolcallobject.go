// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RunToolCallObjectFunction - The function definition.
type RunToolCallObjectFunction struct {
	// The arguments that the model expects you to pass to the function.
	Arguments string `json:"arguments"`
	// The name of the function.
	Name string `json:"name"`
}

func (o *RunToolCallObjectFunction) GetArguments() string {
	if o == nil {
		return ""
	}
	return o.Arguments
}

func (o *RunToolCallObjectFunction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// RunToolCallObjectType - The type of tool call the output is required for. For now, this is always `function`.
type RunToolCallObjectType string

const (
	RunToolCallObjectTypeFunction RunToolCallObjectType = "function"
)

func (e RunToolCallObjectType) ToPointer() *RunToolCallObjectType {
	return &e
}

func (e *RunToolCallObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = RunToolCallObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunToolCallObjectType: %v", v)
	}
}

// RunToolCallObject - Tool call objects
type RunToolCallObject struct {
	// The function definition.
	Function RunToolCallObjectFunction `json:"function"`
	// The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
	ID string `json:"id"`
	// The type of tool call the output is required for. For now, this is always `function`.
	Type RunToolCallObjectType `json:"type"`
}

func (o *RunToolCallObject) GetFunction() RunToolCallObjectFunction {
	if o == nil {
		return RunToolCallObjectFunction{}
	}
	return o.Function
}

func (o *RunToolCallObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunToolCallObject) GetType() RunToolCallObjectType {
	if o == nil {
		return RunToolCallObjectType("")
	}
	return o.Type
}
