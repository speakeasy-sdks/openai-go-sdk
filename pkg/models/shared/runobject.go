// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// Code - One of `server_error` or `rate_limit_exceeded`.
type Code string

const (
	CodeServerError       Code = "server_error"
	CodeRateLimitExceeded Code = "rate_limit_exceeded"
)

func (e Code) ToPointer() *Code {
	return &e
}

func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server_error":
		fallthrough
	case "rate_limit_exceeded":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

// LastError - The last error associated with this run. Will be `null` if there are no errors.
type LastError struct {
	// One of `server_error` or `rate_limit_exceeded`.
	Code Code `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

func (o *LastError) GetCode() Code {
	if o == nil {
		return Code("")
	}
	return o.Code
}

func (o *LastError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// RunObjectMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
type RunObjectMetadata struct {
}

// RunObjectObject - The object type, which is always `assistant.run`.
type RunObjectObject string

const (
	RunObjectObjectAssistantRun RunObjectObject = "assistant.run"
)

func (e RunObjectObject) ToPointer() *RunObjectObject {
	return &e
}

func (e *RunObjectObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant.run":
		*e = RunObjectObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectObject: %v", v)
	}
}

// SubmitToolOutputs - Details on the tool outputs needed for this run to continue.
type SubmitToolOutputs struct {
	// A list of the relevant tool calls.
	ToolCalls []RunToolCallObject `json:"tool_calls"`
}

func (o *SubmitToolOutputs) GetToolCalls() []RunToolCallObject {
	if o == nil {
		return []RunToolCallObject{}
	}
	return o.ToolCalls
}

// RunObjectType - For now, this is always `submit_tool_outputs`.
type RunObjectType string

const (
	RunObjectTypeSubmitToolOutputs RunObjectType = "submit_tool_outputs"
)

func (e RunObjectType) ToPointer() *RunObjectType {
	return &e
}

func (e *RunObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "submit_tool_outputs":
		*e = RunObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectType: %v", v)
	}
}

// RequiredAction - Details on the action required to continue the run. Will be `null` if no action is required.
type RequiredAction struct {
	// Details on the tool outputs needed for this run to continue.
	SubmitToolOutputs SubmitToolOutputs `json:"submit_tool_outputs"`
	// For now, this is always `submit_tool_outputs`.
	Type RunObjectType `json:"type"`
}

func (o *RequiredAction) GetSubmitToolOutputs() SubmitToolOutputs {
	if o == nil {
		return SubmitToolOutputs{}
	}
	return o.SubmitToolOutputs
}

func (o *RequiredAction) GetType() RunObjectType {
	if o == nil {
		return RunObjectType("")
	}
	return o.Type
}

// RunObjectStatus - The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
type RunObjectStatus string

const (
	RunObjectStatusQueued         RunObjectStatus = "queued"
	RunObjectStatusInProgress     RunObjectStatus = "in_progress"
	RunObjectStatusRequiresAction RunObjectStatus = "requires_action"
	RunObjectStatusCancelling     RunObjectStatus = "cancelling"
	RunObjectStatusCancelled      RunObjectStatus = "cancelled"
	RunObjectStatusFailed         RunObjectStatus = "failed"
	RunObjectStatusCompleted      RunObjectStatus = "completed"
	RunObjectStatusExpired        RunObjectStatus = "expired"
)

func (e RunObjectStatus) ToPointer() *RunObjectStatus {
	return &e
}

func (e *RunObjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "in_progress":
		fallthrough
	case "requires_action":
		fallthrough
	case "cancelling":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "completed":
		fallthrough
	case "expired":
		*e = RunObjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunObjectStatus: %v", v)
	}
}

// Function - The function definition.
type Function struct {
	// A description of what the function does, used by the model to choose when and how to call the function.
	Description string `json:"description"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
	Parameters map[string]interface{} `json:"parameters"`
}

func (o *Function) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Function) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Function) GetParameters() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Parameters
}

// SchemasType - The type of tool being defined: `function`
type SchemasType string

const (
	SchemasTypeFunction SchemasType = "function"
)

func (e SchemasType) ToPointer() *SchemasType {
	return &e
}

func (e *SchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = SchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasType: %v", v)
	}
}

type FunctionTool struct {
	// The function definition.
	Function Function `json:"function"`
	// The type of tool being defined: `function`
	Type SchemasType `json:"type"`
}

func (o *FunctionTool) GetFunction() Function {
	if o == nil {
		return Function{}
	}
	return o.Function
}

func (o *FunctionTool) GetType() SchemasType {
	if o == nil {
		return SchemasType("")
	}
	return o.Type
}

// SchemasAssistantToolsRetrievalType - The type of tool being defined: `retrieval`
type SchemasAssistantToolsRetrievalType string

const (
	SchemasAssistantToolsRetrievalTypeRetrieval SchemasAssistantToolsRetrievalType = "retrieval"
)

func (e SchemasAssistantToolsRetrievalType) ToPointer() *SchemasAssistantToolsRetrievalType {
	return &e
}

func (e *SchemasAssistantToolsRetrievalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retrieval":
		*e = SchemasAssistantToolsRetrievalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasAssistantToolsRetrievalType: %v", v)
	}
}

type RetrievalTool struct {
	// The type of tool being defined: `retrieval`
	Type SchemasAssistantToolsRetrievalType `json:"type"`
}

func (o *RetrievalTool) GetType() SchemasAssistantToolsRetrievalType {
	if o == nil {
		return SchemasAssistantToolsRetrievalType("")
	}
	return o.Type
}

// Type - The type of tool being defined: `code_interpreter`
type Type string

const (
	TypeCodeInterpreter Type = "code_interpreter"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code_interpreter":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type CodeInterpreterTool struct {
	// The type of tool being defined: `code_interpreter`
	Type Type `json:"type"`
}

func (o *CodeInterpreterTool) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type RunObjectToolsType string

const (
	RunObjectToolsTypeCodeInterpreterTool RunObjectToolsType = "Code interpreter tool"
	RunObjectToolsTypeRetrievalTool       RunObjectToolsType = "Retrieval tool"
	RunObjectToolsTypeFunctionTool        RunObjectToolsType = "Function tool"
)

type RunObjectTools struct {
	CodeInterpreterTool *CodeInterpreterTool
	RetrievalTool       *RetrievalTool
	FunctionTool        *FunctionTool

	Type RunObjectToolsType
}

func CreateRunObjectToolsCodeInterpreterTool(codeInterpreterTool CodeInterpreterTool) RunObjectTools {
	typ := RunObjectToolsTypeCodeInterpreterTool

	return RunObjectTools{
		CodeInterpreterTool: &codeInterpreterTool,
		Type:                typ,
	}
}

func CreateRunObjectToolsRetrievalTool(retrievalTool RetrievalTool) RunObjectTools {
	typ := RunObjectToolsTypeRetrievalTool

	return RunObjectTools{
		RetrievalTool: &retrievalTool,
		Type:          typ,
	}
}

func CreateRunObjectToolsFunctionTool(functionTool FunctionTool) RunObjectTools {
	typ := RunObjectToolsTypeFunctionTool

	return RunObjectTools{
		FunctionTool: &functionTool,
		Type:         typ,
	}
}

func (u *RunObjectTools) UnmarshalJSON(data []byte) error {

	codeInterpreterTool := CodeInterpreterTool{}
	if err := utils.UnmarshalJSON(data, &codeInterpreterTool, "", true, true); err == nil {
		u.CodeInterpreterTool = &codeInterpreterTool
		u.Type = RunObjectToolsTypeCodeInterpreterTool
		return nil
	}

	retrievalTool := RetrievalTool{}
	if err := utils.UnmarshalJSON(data, &retrievalTool, "", true, true); err == nil {
		u.RetrievalTool = &retrievalTool
		u.Type = RunObjectToolsTypeRetrievalTool
		return nil
	}

	functionTool := FunctionTool{}
	if err := utils.UnmarshalJSON(data, &functionTool, "", true, true); err == nil {
		u.FunctionTool = &functionTool
		u.Type = RunObjectToolsTypeFunctionTool
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RunObjectTools) MarshalJSON() ([]byte, error) {
	if u.CodeInterpreterTool != nil {
		return utils.MarshalJSON(u.CodeInterpreterTool, "", true)
	}

	if u.RetrievalTool != nil {
		return utils.MarshalJSON(u.RetrievalTool, "", true)
	}

	if u.FunctionTool != nil {
		return utils.MarshalJSON(u.FunctionTool, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RunObject - Represents an execution run on a [thread](/docs/api-reference/threads).
type RunObject struct {
	// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
	AssistantID string `json:"assistant_id"`
	// The Unix timestamp (in seconds) for when the run was cancelled.
	CancelledAt *int64 `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run was completed.
	CompletedAt *int64 `json:"completed_at"`
	// The Unix timestamp (in seconds) for when the run was created.
	CreatedAt int64 `json:"created_at"`
	// The Unix timestamp (in seconds) for when the run will expire.
	ExpiresAt int64 `json:"expires_at"`
	// The Unix timestamp (in seconds) for when the run failed.
	FailedAt *int64 `json:"failed_at"`
	// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
	FileIds []string `json:"file_ids"`
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
	Instructions string `json:"instructions"`
	// The last error associated with this run. Will be `null` if there are no errors.
	LastError *LastError `json:"last_error"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	//
	Metadata *RunObjectMetadata `json:"metadata"`
	// The model that the [assistant](/docs/api-reference/assistants) used for this run.
	Model string `json:"model"`
	// The object type, which is always `assistant.run`.
	Object RunObjectObject `json:"object"`
	// Details on the action required to continue the run. Will be `null` if no action is required.
	RequiredAction *RequiredAction `json:"required_action"`
	// The Unix timestamp (in seconds) for when the run was started.
	StartedAt *int64 `json:"started_at"`
	// The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
	Status RunObjectStatus `json:"status"`
	// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
	ThreadID string `json:"thread_id"`
	// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
	Tools []RunObjectTools `json:"tools"`
}

func (o *RunObject) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *RunObject) GetCancelledAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CancelledAt
}

func (o *RunObject) GetCompletedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *RunObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *RunObject) GetExpiresAt() int64 {
	if o == nil {
		return 0
	}
	return o.ExpiresAt
}

func (o *RunObject) GetFailedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.FailedAt
}

func (o *RunObject) GetFileIds() []string {
	if o == nil {
		return []string{}
	}
	return o.FileIds
}

func (o *RunObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunObject) GetInstructions() string {
	if o == nil {
		return ""
	}
	return o.Instructions
}

func (o *RunObject) GetLastError() *LastError {
	if o == nil {
		return nil
	}
	return o.LastError
}

func (o *RunObject) GetMetadata() *RunObjectMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *RunObject) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *RunObject) GetObject() RunObjectObject {
	if o == nil {
		return RunObjectObject("")
	}
	return o.Object
}

func (o *RunObject) GetRequiredAction() *RequiredAction {
	if o == nil {
		return nil
	}
	return o.RequiredAction
}

func (o *RunObject) GetStartedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *RunObject) GetStatus() RunObjectStatus {
	if o == nil {
		return RunObjectStatus("")
	}
	return o.Status
}

func (o *RunObject) GetThreadID() string {
	if o == nil {
		return ""
	}
	return o.ThreadID
}

func (o *RunObject) GetTools() []RunObjectTools {
	if o == nil {
		return []RunObjectTools{}
	}
	return o.Tools
}
