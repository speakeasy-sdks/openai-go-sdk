// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// CreateRunRequestMetadata - Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
type CreateRunRequestMetadata struct {
}

// Function - The function definition.
type Function struct {
	// A description of what the function does, used by the model to choose when and how to call the function.
	Description string `json:"description"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
	Parameters map[string]interface{} `json:"parameters"`
}

func (o *Function) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Function) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Function) GetParameters() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Parameters
}

// SchemasType - The type of tool being defined: `function`
type SchemasType string

const (
	SchemasTypeFunction SchemasType = "function"
)

func (e SchemasType) ToPointer() *SchemasType {
	return &e
}

func (e *SchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = SchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasType: %v", v)
	}
}

type FunctionTool struct {
	// The function definition.
	Function Function `json:"function"`
	// The type of tool being defined: `function`
	Type SchemasType `json:"type"`
}

func (o *FunctionTool) GetFunction() Function {
	if o == nil {
		return Function{}
	}
	return o.Function
}

func (o *FunctionTool) GetType() SchemasType {
	if o == nil {
		return SchemasType("")
	}
	return o.Type
}

// SchemasAssistantToolsRetrievalType - The type of tool being defined: `retrieval`
type SchemasAssistantToolsRetrievalType string

const (
	SchemasAssistantToolsRetrievalTypeRetrieval SchemasAssistantToolsRetrievalType = "retrieval"
)

func (e SchemasAssistantToolsRetrievalType) ToPointer() *SchemasAssistantToolsRetrievalType {
	return &e
}

func (e *SchemasAssistantToolsRetrievalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retrieval":
		*e = SchemasAssistantToolsRetrievalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasAssistantToolsRetrievalType: %v", v)
	}
}

type RetrievalTool struct {
	// The type of tool being defined: `retrieval`
	Type SchemasAssistantToolsRetrievalType `json:"type"`
}

func (o *RetrievalTool) GetType() SchemasAssistantToolsRetrievalType {
	if o == nil {
		return SchemasAssistantToolsRetrievalType("")
	}
	return o.Type
}

// Type - The type of tool being defined: `code_interpreter`
type Type string

const (
	TypeCodeInterpreter Type = "code_interpreter"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code_interpreter":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type CodeInterpreterTool struct {
	// The type of tool being defined: `code_interpreter`
	Type Type `json:"type"`
}

func (o *CodeInterpreterTool) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type CreateRunRequestToolsType string

const (
	CreateRunRequestToolsTypeCodeInterpreterTool CreateRunRequestToolsType = "Code interpreter tool"
	CreateRunRequestToolsTypeRetrievalTool       CreateRunRequestToolsType = "Retrieval tool"
	CreateRunRequestToolsTypeFunctionTool        CreateRunRequestToolsType = "Function tool"
)

type CreateRunRequestTools struct {
	CodeInterpreterTool *CodeInterpreterTool
	RetrievalTool       *RetrievalTool
	FunctionTool        *FunctionTool

	Type CreateRunRequestToolsType
}

func CreateCreateRunRequestToolsCodeInterpreterTool(codeInterpreterTool CodeInterpreterTool) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeCodeInterpreterTool

	return CreateRunRequestTools{
		CodeInterpreterTool: &codeInterpreterTool,
		Type:                typ,
	}
}

func CreateCreateRunRequestToolsRetrievalTool(retrievalTool RetrievalTool) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeRetrievalTool

	return CreateRunRequestTools{
		RetrievalTool: &retrievalTool,
		Type:          typ,
	}
}

func CreateCreateRunRequestToolsFunctionTool(functionTool FunctionTool) CreateRunRequestTools {
	typ := CreateRunRequestToolsTypeFunctionTool

	return CreateRunRequestTools{
		FunctionTool: &functionTool,
		Type:         typ,
	}
}

func (u *CreateRunRequestTools) UnmarshalJSON(data []byte) error {

	codeInterpreterTool := CodeInterpreterTool{}
	if err := utils.UnmarshalJSON(data, &codeInterpreterTool, "", true, true); err == nil {
		u.CodeInterpreterTool = &codeInterpreterTool
		u.Type = CreateRunRequestToolsTypeCodeInterpreterTool
		return nil
	}

	retrievalTool := RetrievalTool{}
	if err := utils.UnmarshalJSON(data, &retrievalTool, "", true, true); err == nil {
		u.RetrievalTool = &retrievalTool
		u.Type = CreateRunRequestToolsTypeRetrievalTool
		return nil
	}

	functionTool := FunctionTool{}
	if err := utils.UnmarshalJSON(data, &functionTool, "", true, true); err == nil {
		u.FunctionTool = &functionTool
		u.Type = CreateRunRequestToolsTypeFunctionTool
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateRunRequestTools) MarshalJSON() ([]byte, error) {
	if u.CodeInterpreterTool != nil {
		return utils.MarshalJSON(u.CodeInterpreterTool, "", true)
	}

	if u.RetrievalTool != nil {
		return utils.MarshalJSON(u.RetrievalTool, "", true)
	}

	if u.FunctionTool != nil {
		return utils.MarshalJSON(u.FunctionTool, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantID string `json:"assistant_id"`
	// Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
	Instructions *string `json:"instructions,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
	//
	Metadata *CreateRunRequestMetadata `json:"metadata,omitempty"`
	// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
	Model *string `json:"model,omitempty"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
	Tools []CreateRunRequestTools `json:"tools,omitempty"`
}

func (o *CreateRunRequest) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *CreateRunRequest) GetInstructions() *string {
	if o == nil {
		return nil
	}
	return o.Instructions
}

func (o *CreateRunRequest) GetMetadata() *CreateRunRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateRunRequest) GetModel() *string {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateRunRequest) GetTools() []CreateRunRequestTools {
	if o == nil {
		return nil
	}
	return o.Tools
}
