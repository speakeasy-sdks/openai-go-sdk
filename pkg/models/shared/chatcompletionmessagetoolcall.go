// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChatCompletionMessageToolCallFunction - The function that the model called.
type ChatCompletionMessageToolCallFunction struct {
	// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
	// The name of the function to call.
	Name string `json:"name"`
}

func (o *ChatCompletionMessageToolCallFunction) GetArguments() string {
	if o == nil {
		return ""
	}
	return o.Arguments
}

func (o *ChatCompletionMessageToolCallFunction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// ChatCompletionMessageToolCallType - The type of the tool. Currently, only `function` is supported.
type ChatCompletionMessageToolCallType string

const (
	ChatCompletionMessageToolCallTypeFunction ChatCompletionMessageToolCallType = "function"
)

func (e ChatCompletionMessageToolCallType) ToPointer() *ChatCompletionMessageToolCallType {
	return &e
}

func (e *ChatCompletionMessageToolCallType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = ChatCompletionMessageToolCallType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatCompletionMessageToolCallType: %v", v)
	}
}

type ChatCompletionMessageToolCall struct {
	// The function that the model called.
	Function ChatCompletionMessageToolCallFunction `json:"function"`
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionMessageToolCallType `json:"type"`
}

func (o *ChatCompletionMessageToolCall) GetFunction() ChatCompletionMessageToolCallFunction {
	if o == nil {
		return ChatCompletionMessageToolCallFunction{}
	}
	return o.Function
}

func (o *ChatCompletionMessageToolCall) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ChatCompletionMessageToolCall) GetType() ChatCompletionMessageToolCallType {
	if o == nil {
		return ChatCompletionMessageToolCallType("")
	}
	return o.Type
}
