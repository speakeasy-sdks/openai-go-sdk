// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// CreateFineTuneRequest1 - The number of epochs to train the model for. An epoch refers to one
// full cycle through the training dataset.
type CreateFineTuneRequest1 string

const (
	CreateFineTuneRequest1Auto CreateFineTuneRequest1 = "auto"
)

func (e CreateFineTuneRequest1) ToPointer() *CreateFineTuneRequest1 {
	return &e
}

func (e *CreateFineTuneRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		*e = CreateFineTuneRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFineTuneRequest1: %v", v)
	}
}

type NEpochsType string

const (
	NEpochsTypeCreateFineTuneRequest1 NEpochsType = "CreateFineTuneRequest_1"
	NEpochsTypeInteger                NEpochsType = "integer"
)

type NEpochs struct {
	CreateFineTuneRequest1 *CreateFineTuneRequest1
	Integer                *int64

	Type NEpochsType
}

func CreateNEpochsCreateFineTuneRequest1(createFineTuneRequest1 CreateFineTuneRequest1) NEpochs {
	typ := NEpochsTypeCreateFineTuneRequest1

	return NEpochs{
		CreateFineTuneRequest1: &createFineTuneRequest1,
		Type:                   typ,
	}
}

func CreateNEpochsInteger(integer int64) NEpochs {
	typ := NEpochsTypeInteger

	return NEpochs{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *NEpochs) UnmarshalJSON(data []byte) error {

	createFineTuneRequest1 := CreateFineTuneRequest1("")
	if err := utils.UnmarshalJSON(data, &createFineTuneRequest1, "", true, true); err == nil {
		u.CreateFineTuneRequest1 = &createFineTuneRequest1
		u.Type = NEpochsTypeCreateFineTuneRequest1
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = NEpochsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NEpochs) MarshalJSON() ([]byte, error) {
	if u.CreateFineTuneRequest1 != nil {
		return utils.MarshalJSON(u.CreateFineTuneRequest1, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// Hyperparameters - The hyperparameters used for the fine-tuning job.
type Hyperparameters struct {
	// The number of epochs to train the model for. An epoch refers to one
	// full cycle through the training dataset.
	//
	NEpochs *NEpochs `json:"n_epochs,omitempty"`
}

func (o *Hyperparameters) GetNEpochs() *NEpochs {
	if o == nil {
		return nil
	}
	return o.NEpochs
}

// CreateFineTuneRequest2 - The name of the base model to fine-tune. You can select one of "ada",
// "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.
// To learn more about these models, see the
// [Models](/docs/models) documentation.
type CreateFineTuneRequest2 string

const (
	CreateFineTuneRequest2Ada     CreateFineTuneRequest2 = "ada"
	CreateFineTuneRequest2Babbage CreateFineTuneRequest2 = "babbage"
	CreateFineTuneRequest2Curie   CreateFineTuneRequest2 = "curie"
	CreateFineTuneRequest2Davinci CreateFineTuneRequest2 = "davinci"
)

func (e CreateFineTuneRequest2) ToPointer() *CreateFineTuneRequest2 {
	return &e
}

func (e *CreateFineTuneRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ada":
		fallthrough
	case "babbage":
		fallthrough
	case "curie":
		fallthrough
	case "davinci":
		*e = CreateFineTuneRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFineTuneRequest2: %v", v)
	}
}

type CreateFineTuneRequestModelType string

const (
	CreateFineTuneRequestModelTypeStr                    CreateFineTuneRequestModelType = "str"
	CreateFineTuneRequestModelTypeCreateFineTuneRequest2 CreateFineTuneRequestModelType = "CreateFineTuneRequest_2"
)

type CreateFineTuneRequestModel struct {
	Str                    *string
	CreateFineTuneRequest2 *CreateFineTuneRequest2

	Type CreateFineTuneRequestModelType
}

func CreateCreateFineTuneRequestModelStr(str string) CreateFineTuneRequestModel {
	typ := CreateFineTuneRequestModelTypeStr

	return CreateFineTuneRequestModel{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateFineTuneRequestModelCreateFineTuneRequest2(createFineTuneRequest2 CreateFineTuneRequest2) CreateFineTuneRequestModel {
	typ := CreateFineTuneRequestModelTypeCreateFineTuneRequest2

	return CreateFineTuneRequestModel{
		CreateFineTuneRequest2: &createFineTuneRequest2,
		Type:                   typ,
	}
}

func (u *CreateFineTuneRequestModel) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateFineTuneRequestModelTypeStr
		return nil
	}

	createFineTuneRequest2 := CreateFineTuneRequest2("")
	if err := utils.UnmarshalJSON(data, &createFineTuneRequest2, "", true, true); err == nil {
		u.CreateFineTuneRequest2 = &createFineTuneRequest2
		u.Type = CreateFineTuneRequestModelTypeCreateFineTuneRequest2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateFineTuneRequestModel) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateFineTuneRequest2 != nil {
		return utils.MarshalJSON(u.CreateFineTuneRequest2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateFineTuneRequest struct {
	// The batch size to use for training. The batch size is the number of
	// training examples used to train a single forward and backward pass.
	//
	// By default, the batch size will be dynamically configured to be
	// ~0.2% of the number of examples in the training set, capped at 256 -
	// in general, we've found that larger batch sizes tend to work better
	// for larger datasets.
	//
	BatchSize *int64 `default:"null" json:"batch_size"`
	// If this is provided, we calculate F-beta scores at the specified
	// beta values. The F-beta score is a generalization of F-1 score.
	// This is only used for binary classification.
	//
	// With a beta of 1 (i.e. the F-1 score), precision and recall are
	// given the same weight. A larger beta score puts more weight on
	// recall and less on precision. A smaller beta score puts more weight
	// on precision and less on recall.
	//
	ClassificationBetas []float64 `json:"classification_betas,omitempty"`
	// The number of classes in a classification task.
	//
	// This parameter is required for multiclass classification.
	//
	ClassificationNClasses *int64 `default:"null" json:"classification_n_classes"`
	// The positive class in binary classification.
	//
	// This parameter is needed to generate precision, recall, and F1
	// metrics when doing binary classification.
	//
	ClassificationPositiveClass *string `default:"null" json:"classification_positive_class"`
	// If set, we calculate classification-specific metrics such as accuracy
	// and F-1 score using the validation set at the end of every epoch.
	// These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
	//
	// In order to compute classification metrics, you must provide a
	// `validation_file`. Additionally, you must
	// specify `classification_n_classes` for multiclass classification or
	// `classification_positive_class` for binary classification.
	//
	ComputeClassificationMetrics *bool `default:"false" json:"compute_classification_metrics"`
	// The hyperparameters used for the fine-tuning job.
	Hyperparameters *Hyperparameters `json:"hyperparameters,omitempty"`
	// The learning rate multiplier to use for training.
	// The fine-tuning learning rate is the original learning rate used for
	// pretraining multiplied by this value.
	//
	// By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
	// depending on final `batch_size` (larger learning rates tend to
	// perform better with larger batch sizes). We recommend experimenting
	// with values in the range 0.02 to 0.2 to see what produces the best
	// results.
	//
	LearningRateMultiplier *float64 `default:"null" json:"learning_rate_multiplier"`
	// The name of the base model to fine-tune. You can select one of "ada",
	// "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.
	// To learn more about these models, see the
	// [Models](/docs/models) documentation.
	//
	Model *CreateFineTuneRequestModel `json:"model,omitempty"`
	// The weight to use for loss on the prompt tokens. This controls how
	// much the model tries to learn to generate the prompt (as compared
	// to the completion which always has a weight of 1.0), and can add
	// a stabilizing effect to training when completions are short.
	//
	// If prompts are extremely long (relative to completions), it may make
	// sense to reduce this weight so as to avoid over-prioritizing
	// learning the prompt.
	//
	PromptLossWeight *float64 `default:"0.01" json:"prompt_loss_weight"`
	// A string of up to 40 characters that will be added to your fine-tuned model name.
	//
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
	//
	Suffix *string `default:"null" json:"suffix"`
	// The ID of an uploaded file that contains training data.
	//
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	//
	// Your dataset must be formatted as a JSONL file, where each training
	// example is a JSON object with the keys "prompt" and "completion".
	// Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
	//
	TrainingFile string `json:"training_file"`
	// The ID of an uploaded file that contains validation data.
	//
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
	// Your train and validation data should be mutually exclusive.
	//
	// Your dataset must be formatted as a JSONL file, where each validation
	// example is a JSON object with the keys "prompt" and "completion".
	// Additionally, you must upload your file with the purpose `fine-tune`.
	//
	// See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
	//
	ValidationFile *string `json:"validation_file,omitempty"`
}

func (c CreateFineTuneRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateFineTuneRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateFineTuneRequest) GetBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSize
}

func (o *CreateFineTuneRequest) GetClassificationBetas() []float64 {
	if o == nil {
		return nil
	}
	return o.ClassificationBetas
}

func (o *CreateFineTuneRequest) GetClassificationNClasses() *int64 {
	if o == nil {
		return nil
	}
	return o.ClassificationNClasses
}

func (o *CreateFineTuneRequest) GetClassificationPositiveClass() *string {
	if o == nil {
		return nil
	}
	return o.ClassificationPositiveClass
}

func (o *CreateFineTuneRequest) GetComputeClassificationMetrics() *bool {
	if o == nil {
		return nil
	}
	return o.ComputeClassificationMetrics
}

func (o *CreateFineTuneRequest) GetHyperparameters() *Hyperparameters {
	if o == nil {
		return nil
	}
	return o.Hyperparameters
}

func (o *CreateFineTuneRequest) GetLearningRateMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.LearningRateMultiplier
}

func (o *CreateFineTuneRequest) GetModel() *CreateFineTuneRequestModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateFineTuneRequest) GetPromptLossWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.PromptLossWeight
}

func (o *CreateFineTuneRequest) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *CreateFineTuneRequest) GetTrainingFile() string {
	if o == nil {
		return ""
	}
	return o.TrainingFile
}

func (o *CreateFineTuneRequest) GetValidationFile() *string {
	if o == nil {
		return nil
	}
	return o.ValidationFile
}
