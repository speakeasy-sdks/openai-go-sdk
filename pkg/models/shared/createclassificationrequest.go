// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type CreateClassificationRequest struct {
	// A list of examples with labels, in the following format:
	//
	// `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
	//
	// All the label strings will be normalized to be capitalized.
	//
	// You should specify either `examples` or `file`, but not both.
	//
	Examples [][]string  `json:"examples,omitempty"`
	Expand   interface{} `json:"expand,omitempty"`
	// The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
	//
	// You should specify either `examples` or `file`, but not both.
	//
	File *string `json:"file,omitempty"`
	// The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
	Labels    []string    `json:"labels,omitempty"`
	LogitBias interface{} `json:"logit_bias,omitempty"`
	Logprobs  interface{} `json:"logprobs,omitempty"`
	// The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
	MaxExamples *int64      `json:"max_examples,omitempty"`
	Model       interface{} `json:"model"`
	// Query to be classified.
	Query          string      `json:"query"`
	ReturnMetadata interface{} `json:"return_metadata,omitempty"`
	ReturnPrompt   interface{} `json:"return_prompt,omitempty"`
	SearchModel    interface{} `json:"search_model,omitempty"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature *float64    `json:"temperature,omitempty"`
	User        interface{} `json:"user,omitempty"`
}
