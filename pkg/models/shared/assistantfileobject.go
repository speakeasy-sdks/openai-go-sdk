// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Object - The object type, which is always `assistant.file`.
type Object string

const (
	ObjectAssistantFile Object = "assistant.file"
)

func (e Object) ToPointer() *Object {
	return &e
}

func (e *Object) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant.file":
		*e = Object(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Object: %v", v)
	}
}

// AssistantFileObject - A list of [Files](/docs/api-reference/files) attached to an `assistant`.
type AssistantFileObject struct {
	// The assistant ID that the file is attached to.
	AssistantID string `json:"assistant_id"`
	// The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int64 `json:"created_at"`
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `assistant.file`.
	Object Object `json:"object"`
}

func (o *AssistantFileObject) GetAssistantID() string {
	if o == nil {
		return ""
	}
	return o.AssistantID
}

func (o *AssistantFileObject) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *AssistantFileObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AssistantFileObject) GetObject() Object {
	if o == nil {
		return Object("")
	}
	return o.Object
}
