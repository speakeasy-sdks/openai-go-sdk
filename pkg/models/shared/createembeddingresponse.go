// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateEmbeddingResponseObject - The object type, which is always "list".
type CreateEmbeddingResponseObject string

const (
	CreateEmbeddingResponseObjectList CreateEmbeddingResponseObject = "list"
)

func (e CreateEmbeddingResponseObject) ToPointer() *CreateEmbeddingResponseObject {
	return &e
}

func (e *CreateEmbeddingResponseObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		*e = CreateEmbeddingResponseObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEmbeddingResponseObject: %v", v)
	}
}

// Usage - The usage information for the request.
type Usage struct {
	// The number of tokens used by the prompt.
	PromptTokens int64 `json:"prompt_tokens"`
	// The total number of tokens used by the request.
	TotalTokens int64 `json:"total_tokens"`
}

func (o *Usage) GetPromptTokens() int64 {
	if o == nil {
		return 0
	}
	return o.PromptTokens
}

func (o *Usage) GetTotalTokens() int64 {
	if o == nil {
		return 0
	}
	return o.TotalTokens
}

type CreateEmbeddingResponse struct {
	// The list of embeddings generated by the model.
	Data []Embedding `json:"data"`
	// The name of the model used to generate the embedding.
	Model string `json:"model"`
	// The object type, which is always "list".
	Object CreateEmbeddingResponseObject `json:"object"`
	// The usage information for the request.
	Usage Usage `json:"usage"`
}

func (o *CreateEmbeddingResponse) GetData() []Embedding {
	if o == nil {
		return []Embedding{}
	}
	return o.Data
}

func (o *CreateEmbeddingResponse) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *CreateEmbeddingResponse) GetObject() CreateEmbeddingResponseObject {
	if o == nil {
		return CreateEmbeddingResponseObject("")
	}
	return o.Object
}

func (o *CreateEmbeddingResponse) GetUsage() Usage {
	if o == nil {
		return Usage{}
	}
	return o.Usage
}
