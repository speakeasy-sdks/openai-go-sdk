// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

type AnnotationsType string

const (
	AnnotationsTypeMessageContentTextAnnotationsFileCitationObject AnnotationsType = "MessageContentTextAnnotationsFileCitationObject"
	AnnotationsTypeMessageContentTextAnnotationsFilePathObject     AnnotationsType = "MessageContentTextAnnotationsFilePathObject"
)

type Annotations struct {
	MessageContentTextAnnotationsFileCitationObject *MessageContentTextAnnotationsFileCitationObject
	MessageContentTextAnnotationsFilePathObject     *MessageContentTextAnnotationsFilePathObject

	Type AnnotationsType
}

func CreateAnnotationsMessageContentTextAnnotationsFileCitationObject(messageContentTextAnnotationsFileCitationObject MessageContentTextAnnotationsFileCitationObject) Annotations {
	typ := AnnotationsTypeMessageContentTextAnnotationsFileCitationObject

	return Annotations{
		MessageContentTextAnnotationsFileCitationObject: &messageContentTextAnnotationsFileCitationObject,
		Type: typ,
	}
}

func CreateAnnotationsMessageContentTextAnnotationsFilePathObject(messageContentTextAnnotationsFilePathObject MessageContentTextAnnotationsFilePathObject) Annotations {
	typ := AnnotationsTypeMessageContentTextAnnotationsFilePathObject

	return Annotations{
		MessageContentTextAnnotationsFilePathObject: &messageContentTextAnnotationsFilePathObject,
		Type: typ,
	}
}

func (u *Annotations) UnmarshalJSON(data []byte) error {

	messageContentTextAnnotationsFileCitationObject := MessageContentTextAnnotationsFileCitationObject{}
	if err := utils.UnmarshalJSON(data, &messageContentTextAnnotationsFileCitationObject, "", true, true); err == nil {
		u.MessageContentTextAnnotationsFileCitationObject = &messageContentTextAnnotationsFileCitationObject
		u.Type = AnnotationsTypeMessageContentTextAnnotationsFileCitationObject
		return nil
	}

	messageContentTextAnnotationsFilePathObject := MessageContentTextAnnotationsFilePathObject{}
	if err := utils.UnmarshalJSON(data, &messageContentTextAnnotationsFilePathObject, "", true, true); err == nil {
		u.MessageContentTextAnnotationsFilePathObject = &messageContentTextAnnotationsFilePathObject
		u.Type = AnnotationsTypeMessageContentTextAnnotationsFilePathObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Annotations) MarshalJSON() ([]byte, error) {
	if u.MessageContentTextAnnotationsFileCitationObject != nil {
		return utils.MarshalJSON(u.MessageContentTextAnnotationsFileCitationObject, "", true)
	}

	if u.MessageContentTextAnnotationsFilePathObject != nil {
		return utils.MarshalJSON(u.MessageContentTextAnnotationsFilePathObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Text struct {
	Annotations []Annotations `json:"annotations"`
	// The data that makes up the text.
	Value string `json:"value"`
}

func (o *Text) GetAnnotations() []Annotations {
	if o == nil {
		return []Annotations{}
	}
	return o.Annotations
}

func (o *Text) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// MessageContentTextObjectType - Always `text`.
type MessageContentTextObjectType string

const (
	MessageContentTextObjectTypeText MessageContentTextObjectType = "text"
)

func (e MessageContentTextObjectType) ToPointer() *MessageContentTextObjectType {
	return &e
}

func (e *MessageContentTextObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		*e = MessageContentTextObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageContentTextObjectType: %v", v)
	}
}

// MessageContentTextObject - The text content that is part of a message.
type MessageContentTextObject struct {
	Text Text `json:"text"`
	// Always `text`.
	Type MessageContentTextObjectType `json:"type"`
}

func (o *MessageContentTextObject) GetText() Text {
	if o == nil {
		return Text{}
	}
	return o.Text
}

func (o *MessageContentTextObject) GetType() MessageContentTextObjectType {
	if o == nil {
		return MessageContentTextObjectType("")
	}
	return o.Type
}
