// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

// CreateChatCompletionRequestLogitBias - Modify the likelihood of specified tokens appearing in the completion.
//
// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
type CreateChatCompletionRequestLogitBias struct {
}

type CreateChatCompletionRequestStopType string

const (
	CreateChatCompletionRequestStopTypeStr        CreateChatCompletionRequestStopType = "str"
	CreateChatCompletionRequestStopTypeArrayOfstr CreateChatCompletionRequestStopType = "arrayOfstr"
)

type CreateChatCompletionRequestStop struct {
	Str        *string
	ArrayOfstr []string

	Type CreateChatCompletionRequestStopType
}

func CreateCreateChatCompletionRequestStopStr(str string) CreateChatCompletionRequestStop {
	typ := CreateChatCompletionRequestStopTypeStr

	return CreateChatCompletionRequestStop{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateChatCompletionRequestStopArrayOfstr(arrayOfstr []string) CreateChatCompletionRequestStop {
	typ := CreateChatCompletionRequestStopTypeArrayOfstr

	return CreateChatCompletionRequestStop{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CreateChatCompletionRequestStop) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = CreateChatCompletionRequestStopTypeStr
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateChatCompletionRequestStopTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateChatCompletionRequestStop) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type CreateChatCompletionRequest struct {
	// completions_frequency_penalty_description
	FrequencyPenalty *float64 `json:"frequency_penalty,omitempty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	//
	LogitBias *CreateChatCompletionRequestLogitBias `json:"logit_bias,omitempty"`
	// The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
	//
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
	Messages []ChatCompletionRequestMessage `json:"messages"`
	// ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
	Model string `json:"model"`
	// How many chat completion choices to generate for each input message.
	N *int64 `json:"n,omitempty"`
	// completions_presence_penalty_description
	PresencePenalty *float64 `json:"presence_penalty,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens.
	//
	Stop *CreateChatCompletionRequestStop `json:"stop,omitempty"`
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
	//
	Stream *bool `json:"stream,omitempty"`
	// completions_temperature_description
	Temperature *float64 `json:"temperature,omitempty"`
	// completions_top_p_description
	TopP *float64    `json:"top_p,omitempty"`
	User interface{} `json:"user,omitempty"`
}
