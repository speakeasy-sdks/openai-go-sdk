// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssistantToolsFunctionFunction - The function definition.
type AssistantToolsFunctionFunction struct {
	// A description of what the function does, used by the model to choose when and how to call the function.
	Description string `json:"description"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`
	// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	//
	// To describe a function that accepts no parameters, provide the value `{"type": "object", "properties": {}}`.
	Parameters map[string]interface{} `json:"parameters"`
}

func (o *AssistantToolsFunctionFunction) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *AssistantToolsFunctionFunction) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AssistantToolsFunctionFunction) GetParameters() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Parameters
}

// AssistantToolsFunctionType - The type of tool being defined: `function`
type AssistantToolsFunctionType string

const (
	AssistantToolsFunctionTypeFunction AssistantToolsFunctionType = "function"
)

func (e AssistantToolsFunctionType) ToPointer() *AssistantToolsFunctionType {
	return &e
}

func (e *AssistantToolsFunctionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = AssistantToolsFunctionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantToolsFunctionType: %v", v)
	}
}

type AssistantToolsFunction struct {
	// The function definition.
	Function AssistantToolsFunctionFunction `json:"function"`
	// The type of tool being defined: `function`
	Type AssistantToolsFunctionType `json:"type"`
}

func (o *AssistantToolsFunction) GetFunction() AssistantToolsFunctionFunction {
	if o == nil {
		return AssistantToolsFunctionFunction{}
	}
	return o.Function
}

func (o *AssistantToolsFunction) GetType() AssistantToolsFunctionType {
	if o == nil {
		return AssistantToolsFunctionType("")
	}
	return o.Type
}
