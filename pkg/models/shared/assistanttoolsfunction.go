// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssistantToolsFunctionType - The type of tool being defined: `function`
type AssistantToolsFunctionType string

const (
	AssistantToolsFunctionTypeFunction AssistantToolsFunctionType = "function"
)

func (e AssistantToolsFunctionType) ToPointer() *AssistantToolsFunctionType {
	return &e
}

func (e *AssistantToolsFunctionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = AssistantToolsFunctionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantToolsFunctionType: %v", v)
	}
}

type AssistantToolsFunction struct {
	Function FunctionObject `json:"function"`
	// The type of tool being defined: `function`
	Type AssistantToolsFunctionType `json:"type"`
}

func (o *AssistantToolsFunction) GetFunction() FunctionObject {
	if o == nil {
		return FunctionObject{}
	}
	return o.Function
}

func (o *AssistantToolsFunction) GetType() AssistantToolsFunctionType {
	if o == nil {
		return AssistantToolsFunctionType("")
	}
	return o.Type
}
