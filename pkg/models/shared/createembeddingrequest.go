// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/openai-go-sdk/v2/pkg/utils"
)

type CreateEmbeddingRequestInputType string

const (
	CreateEmbeddingRequestInputTypeStr                   CreateEmbeddingRequestInputType = "str"
	CreateEmbeddingRequestInputTypeArrayOfstr            CreateEmbeddingRequestInputType = "arrayOfstr"
	CreateEmbeddingRequestInputTypeArrayOfinteger        CreateEmbeddingRequestInputType = "arrayOfinteger"
	CreateEmbeddingRequestInputTypeArrayOfarrayOfinteger CreateEmbeddingRequestInputType = "arrayOfarrayOfinteger"
)

type CreateEmbeddingRequestInput struct {
	Str                   *string
	ArrayOfstr            []string
	ArrayOfinteger        []int64
	ArrayOfarrayOfinteger [][]int64

	Type CreateEmbeddingRequestInputType
}

func CreateCreateEmbeddingRequestInputStr(str string) CreateEmbeddingRequestInput {
	typ := CreateEmbeddingRequestInputTypeStr

	return CreateEmbeddingRequestInput{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateEmbeddingRequestInputArrayOfstr(arrayOfstr []string) CreateEmbeddingRequestInput {
	typ := CreateEmbeddingRequestInputTypeArrayOfstr

	return CreateEmbeddingRequestInput{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func CreateCreateEmbeddingRequestInputArrayOfinteger(arrayOfinteger []int64) CreateEmbeddingRequestInput {
	typ := CreateEmbeddingRequestInputTypeArrayOfinteger

	return CreateEmbeddingRequestInput{
		ArrayOfinteger: arrayOfinteger,
		Type:           typ,
	}
}

func CreateCreateEmbeddingRequestInputArrayOfarrayOfinteger(arrayOfarrayOfinteger [][]int64) CreateEmbeddingRequestInput {
	typ := CreateEmbeddingRequestInputTypeArrayOfarrayOfinteger

	return CreateEmbeddingRequestInput{
		ArrayOfarrayOfinteger: arrayOfarrayOfinteger,
		Type:                  typ,
	}
}

func (u *CreateEmbeddingRequestInput) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateEmbeddingRequestInputTypeStr
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CreateEmbeddingRequestInputTypeArrayOfstr
		return nil
	}

	arrayOfinteger := []int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfinteger, "", true, true); err == nil {
		u.ArrayOfinteger = arrayOfinteger
		u.Type = CreateEmbeddingRequestInputTypeArrayOfinteger
		return nil
	}

	arrayOfarrayOfinteger := [][]int64{}
	if err := utils.UnmarshalJSON(data, &arrayOfarrayOfinteger, "", true, true); err == nil {
		u.ArrayOfarrayOfinteger = arrayOfarrayOfinteger
		u.Type = CreateEmbeddingRequestInputTypeArrayOfarrayOfinteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateEmbeddingRequestInput) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	if u.ArrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfinteger, "", true)
	}

	if u.ArrayOfarrayOfinteger != nil {
		return utils.MarshalJSON(u.ArrayOfarrayOfinteger, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateEmbeddingRequest struct {
	// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an empty string. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
	//
	Input CreateEmbeddingRequestInput `json:"input"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
	//
	Model interface{} `json:"model"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	//
	User *string `json:"user,omitempty"`
}

func (o *CreateEmbeddingRequest) GetInput() CreateEmbeddingRequestInput {
	if o == nil {
		return CreateEmbeddingRequestInput{}
	}
	return o.Input
}

func (o *CreateEmbeddingRequest) GetModel() interface{} {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateEmbeddingRequest) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
