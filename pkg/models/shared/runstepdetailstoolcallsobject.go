// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

type ToolCallsType string

const (
	ToolCallsTypeRunStepDetailsToolCallsCodeObject      ToolCallsType = "RunStepDetailsToolCallsCodeObject"
	ToolCallsTypeRunStepDetailsToolCallsRetrievalObject ToolCallsType = "RunStepDetailsToolCallsRetrievalObject"
	ToolCallsTypeRunStepDetailsToolCallsFunctionObject  ToolCallsType = "RunStepDetailsToolCallsFunctionObject"
)

type ToolCalls struct {
	RunStepDetailsToolCallsCodeObject      *RunStepDetailsToolCallsCodeObject
	RunStepDetailsToolCallsRetrievalObject *RunStepDetailsToolCallsRetrievalObject
	RunStepDetailsToolCallsFunctionObject  *RunStepDetailsToolCallsFunctionObject

	Type ToolCallsType
}

func CreateToolCallsRunStepDetailsToolCallsCodeObject(runStepDetailsToolCallsCodeObject RunStepDetailsToolCallsCodeObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsCodeObject

	return ToolCalls{
		RunStepDetailsToolCallsCodeObject: &runStepDetailsToolCallsCodeObject,
		Type:                              typ,
	}
}

func CreateToolCallsRunStepDetailsToolCallsRetrievalObject(runStepDetailsToolCallsRetrievalObject RunStepDetailsToolCallsRetrievalObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsRetrievalObject

	return ToolCalls{
		RunStepDetailsToolCallsRetrievalObject: &runStepDetailsToolCallsRetrievalObject,
		Type:                                   typ,
	}
}

func CreateToolCallsRunStepDetailsToolCallsFunctionObject(runStepDetailsToolCallsFunctionObject RunStepDetailsToolCallsFunctionObject) ToolCalls {
	typ := ToolCallsTypeRunStepDetailsToolCallsFunctionObject

	return ToolCalls{
		RunStepDetailsToolCallsFunctionObject: &runStepDetailsToolCallsFunctionObject,
		Type:                                  typ,
	}
}

func (u *ToolCalls) UnmarshalJSON(data []byte) error {

	runStepDetailsToolCallsCodeObject := RunStepDetailsToolCallsCodeObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsCodeObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsCodeObject = &runStepDetailsToolCallsCodeObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsCodeObject
		return nil
	}

	runStepDetailsToolCallsRetrievalObject := RunStepDetailsToolCallsRetrievalObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsRetrievalObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsRetrievalObject = &runStepDetailsToolCallsRetrievalObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsRetrievalObject
		return nil
	}

	runStepDetailsToolCallsFunctionObject := RunStepDetailsToolCallsFunctionObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsFunctionObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsFunctionObject = &runStepDetailsToolCallsFunctionObject
		u.Type = ToolCallsTypeRunStepDetailsToolCallsFunctionObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ToolCalls) MarshalJSON() ([]byte, error) {
	if u.RunStepDetailsToolCallsCodeObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsCodeObject, "", true)
	}

	if u.RunStepDetailsToolCallsRetrievalObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsRetrievalObject, "", true)
	}

	if u.RunStepDetailsToolCallsFunctionObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsFunctionObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// RunStepDetailsToolCallsObjectType - Always `tool_calls`.
type RunStepDetailsToolCallsObjectType string

const (
	RunStepDetailsToolCallsObjectTypeToolCalls RunStepDetailsToolCallsObjectType = "tool_calls"
)

func (e RunStepDetailsToolCallsObjectType) ToPointer() *RunStepDetailsToolCallsObjectType {
	return &e
}

func (e *RunStepDetailsToolCallsObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tool_calls":
		*e = RunStepDetailsToolCallsObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsObjectType: %v", v)
	}
}

// RunStepDetailsToolCallsObject - Details of the tool call.
type RunStepDetailsToolCallsObject struct {
	// An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.
	//
	ToolCalls []ToolCalls `json:"tool_calls"`
	// Always `tool_calls`.
	Type RunStepDetailsToolCallsObjectType `json:"type"`
}

func (o *RunStepDetailsToolCallsObject) GetToolCalls() []ToolCalls {
	if o == nil {
		return []ToolCalls{}
	}
	return o.ToolCalls
}

func (o *RunStepDetailsToolCallsObject) GetType() RunStepDetailsToolCallsObjectType {
	if o == nil {
		return RunStepDetailsToolCallsObjectType("")
	}
	return o.Type
}
