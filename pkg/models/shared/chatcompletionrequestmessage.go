// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

// SchemasRole - The role of the messages author, in this case `function`.
type SchemasRole string

const (
	SchemasRoleFunction SchemasRole = "function"
)

func (e SchemasRole) ToPointer() *SchemasRole {
	return &e
}

func (e *SchemasRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "function":
		*e = SchemasRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasRole: %v", v)
	}
}

// FunctionMessage
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type FunctionMessage struct {
	// The return value from the function call, to return to the model.
	Content *string `json:"content"`
	// The name of the function to call.
	Name string `json:"name"`
	// The role of the messages author, in this case `function`.
	Role SchemasRole `json:"role"`
}

func (o *FunctionMessage) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *FunctionMessage) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *FunctionMessage) GetRole() SchemasRole {
	if o == nil {
		return SchemasRole("")
	}
	return o.Role
}

// SchemasChatCompletionRequestToolMessageRole - The role of the messages author, in this case `tool`.
type SchemasChatCompletionRequestToolMessageRole string

const (
	SchemasChatCompletionRequestToolMessageRoleTool SchemasChatCompletionRequestToolMessageRole = "tool"
)

func (e SchemasChatCompletionRequestToolMessageRole) ToPointer() *SchemasChatCompletionRequestToolMessageRole {
	return &e
}

func (e *SchemasChatCompletionRequestToolMessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tool":
		*e = SchemasChatCompletionRequestToolMessageRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasChatCompletionRequestToolMessageRole: %v", v)
	}
}

type ToolMessage struct {
	// The contents of the tool message.
	Content *string `json:"content"`
	// The role of the messages author, in this case `tool`.
	Role SchemasChatCompletionRequestToolMessageRole `json:"role"`
	// Tool call that this message is responding to.
	ToolCallID string `json:"tool_call_id"`
}

func (o *ToolMessage) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ToolMessage) GetRole() SchemasChatCompletionRequestToolMessageRole {
	if o == nil {
		return SchemasChatCompletionRequestToolMessageRole("")
	}
	return o.Role
}

func (o *ToolMessage) GetToolCallID() string {
	if o == nil {
		return ""
	}
	return o.ToolCallID
}

// FunctionCall - Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type FunctionCall struct {
	// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
	// The name of the function to call.
	Name string `json:"name"`
}

func (o *FunctionCall) GetArguments() string {
	if o == nil {
		return ""
	}
	return o.Arguments
}

func (o *FunctionCall) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Role - The role of the messages author, in this case `assistant`.
type Role string

const (
	RoleAssistant Role = "assistant"
)

func (e Role) ToPointer() *Role {
	return &e
}

func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type AssistantMessage struct {
	// The contents of the assistant message.
	//
	Content *string `json:"content"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	FunctionCall *FunctionCall `json:"function_call,omitempty"`
	// The role of the messages author, in this case `assistant`.
	Role Role `json:"role"`
	// The tool calls generated by the model, such as function calls.
	ToolCalls []ChatCompletionMessageToolCall `json:"tool_calls,omitempty"`
}

func (o *AssistantMessage) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *AssistantMessage) GetFunctionCall() *FunctionCall {
	if o == nil {
		return nil
	}
	return o.FunctionCall
}

func (o *AssistantMessage) GetRole() Role {
	if o == nil {
		return Role("")
	}
	return o.Role
}

func (o *AssistantMessage) GetToolCalls() []ChatCompletionMessageToolCall {
	if o == nil {
		return nil
	}
	return o.ToolCalls
}

type ContentType string

const (
	ContentTypeStr                                            ContentType = "str"
	ContentTypeArrayOfChatCompletionRequestMessageContentPart ContentType = "arrayOfChatCompletionRequestMessageContentPart"
)

type Content struct {
	Str                                            *string
	ArrayOfChatCompletionRequestMessageContentPart []ChatCompletionRequestMessageContentPart

	Type ContentType
}

func CreateContentStr(str string) Content {
	typ := ContentTypeStr

	return Content{
		Str:  &str,
		Type: typ,
	}
}

func CreateContentArrayOfChatCompletionRequestMessageContentPart(arrayOfChatCompletionRequestMessageContentPart []ChatCompletionRequestMessageContentPart) Content {
	typ := ContentTypeArrayOfChatCompletionRequestMessageContentPart

	return Content{
		ArrayOfChatCompletionRequestMessageContentPart: arrayOfChatCompletionRequestMessageContentPart,
		Type: typ,
	}
}

func (u *Content) UnmarshalJSON(data []byte) error {

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ContentTypeStr
		return nil
	}

	arrayOfChatCompletionRequestMessageContentPart := []ChatCompletionRequestMessageContentPart{}
	if err := utils.UnmarshalJSON(data, &arrayOfChatCompletionRequestMessageContentPart, "", true, true); err == nil {
		u.ArrayOfChatCompletionRequestMessageContentPart = arrayOfChatCompletionRequestMessageContentPart
		u.Type = ContentTypeArrayOfChatCompletionRequestMessageContentPart
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Content) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfChatCompletionRequestMessageContentPart != nil {
		return utils.MarshalJSON(u.ArrayOfChatCompletionRequestMessageContentPart, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SchemasChatCompletionRequestUserMessageRole - The role of the messages author, in this case `user`.
type SchemasChatCompletionRequestUserMessageRole string

const (
	SchemasChatCompletionRequestUserMessageRoleUser SchemasChatCompletionRequestUserMessageRole = "user"
)

func (e SchemasChatCompletionRequestUserMessageRole) ToPointer() *SchemasChatCompletionRequestUserMessageRole {
	return &e
}

func (e *SchemasChatCompletionRequestUserMessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = SchemasChatCompletionRequestUserMessageRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasChatCompletionRequestUserMessageRole: %v", v)
	}
}

type UserMessage struct {
	// The contents of the user message.
	//
	Content *Content `json:"content"`
	// The role of the messages author, in this case `user`.
	Role SchemasChatCompletionRequestUserMessageRole `json:"role"`
}

func (o *UserMessage) GetContent() *Content {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *UserMessage) GetRole() SchemasChatCompletionRequestUserMessageRole {
	if o == nil {
		return SchemasChatCompletionRequestUserMessageRole("")
	}
	return o.Role
}

// SchemasChatCompletionRequestSystemMessageRole - The role of the messages author, in this case `system`.
type SchemasChatCompletionRequestSystemMessageRole string

const (
	SchemasChatCompletionRequestSystemMessageRoleSystem SchemasChatCompletionRequestSystemMessageRole = "system"
)

func (e SchemasChatCompletionRequestSystemMessageRole) ToPointer() *SchemasChatCompletionRequestSystemMessageRole {
	return &e
}

func (e *SchemasChatCompletionRequestSystemMessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		*e = SchemasChatCompletionRequestSystemMessageRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasChatCompletionRequestSystemMessageRole: %v", v)
	}
}

type SystemMessage struct {
	// The contents of the system message.
	Content *string `json:"content"`
	// The role of the messages author, in this case `system`.
	Role SchemasChatCompletionRequestSystemMessageRole `json:"role"`
}

func (o *SystemMessage) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *SystemMessage) GetRole() SchemasChatCompletionRequestSystemMessageRole {
	if o == nil {
		return SchemasChatCompletionRequestSystemMessageRole("")
	}
	return o.Role
}

type ChatCompletionRequestMessageType string

const (
	ChatCompletionRequestMessageTypeSystemMessage    ChatCompletionRequestMessageType = "System message"
	ChatCompletionRequestMessageTypeUserMessage      ChatCompletionRequestMessageType = "User message"
	ChatCompletionRequestMessageTypeAssistantMessage ChatCompletionRequestMessageType = "Assistant message"
	ChatCompletionRequestMessageTypeToolMessage      ChatCompletionRequestMessageType = "Tool message"
	ChatCompletionRequestMessageTypeFunctionMessage  ChatCompletionRequestMessageType = "Function message"
)

type ChatCompletionRequestMessage struct {
	SystemMessage    *SystemMessage
	UserMessage      *UserMessage
	AssistantMessage *AssistantMessage
	ToolMessage      *ToolMessage
	FunctionMessage  *FunctionMessage

	Type ChatCompletionRequestMessageType
}

func CreateChatCompletionRequestMessageSystemMessage(systemMessage SystemMessage) ChatCompletionRequestMessage {
	typ := ChatCompletionRequestMessageTypeSystemMessage

	return ChatCompletionRequestMessage{
		SystemMessage: &systemMessage,
		Type:          typ,
	}
}

func CreateChatCompletionRequestMessageUserMessage(userMessage UserMessage) ChatCompletionRequestMessage {
	typ := ChatCompletionRequestMessageTypeUserMessage

	return ChatCompletionRequestMessage{
		UserMessage: &userMessage,
		Type:        typ,
	}
}

func CreateChatCompletionRequestMessageAssistantMessage(assistantMessage AssistantMessage) ChatCompletionRequestMessage {
	typ := ChatCompletionRequestMessageTypeAssistantMessage

	return ChatCompletionRequestMessage{
		AssistantMessage: &assistantMessage,
		Type:             typ,
	}
}

func CreateChatCompletionRequestMessageToolMessage(toolMessage ToolMessage) ChatCompletionRequestMessage {
	typ := ChatCompletionRequestMessageTypeToolMessage

	return ChatCompletionRequestMessage{
		ToolMessage: &toolMessage,
		Type:        typ,
	}
}

func CreateChatCompletionRequestMessageFunctionMessage(functionMessage FunctionMessage) ChatCompletionRequestMessage {
	typ := ChatCompletionRequestMessageTypeFunctionMessage

	return ChatCompletionRequestMessage{
		FunctionMessage: &functionMessage,
		Type:            typ,
	}
}

func (u *ChatCompletionRequestMessage) UnmarshalJSON(data []byte) error {

	systemMessage := SystemMessage{}
	if err := utils.UnmarshalJSON(data, &systemMessage, "", true, true); err == nil {
		u.SystemMessage = &systemMessage
		u.Type = ChatCompletionRequestMessageTypeSystemMessage
		return nil
	}

	userMessage := UserMessage{}
	if err := utils.UnmarshalJSON(data, &userMessage, "", true, true); err == nil {
		u.UserMessage = &userMessage
		u.Type = ChatCompletionRequestMessageTypeUserMessage
		return nil
	}

	toolMessage := ToolMessage{}
	if err := utils.UnmarshalJSON(data, &toolMessage, "", true, true); err == nil {
		u.ToolMessage = &toolMessage
		u.Type = ChatCompletionRequestMessageTypeToolMessage
		return nil
	}

	functionMessage := FunctionMessage{}
	if err := utils.UnmarshalJSON(data, &functionMessage, "", true, true); err == nil {
		u.FunctionMessage = &functionMessage
		u.Type = ChatCompletionRequestMessageTypeFunctionMessage
		return nil
	}

	assistantMessage := AssistantMessage{}
	if err := utils.UnmarshalJSON(data, &assistantMessage, "", true, true); err == nil {
		u.AssistantMessage = &assistantMessage
		u.Type = ChatCompletionRequestMessageTypeAssistantMessage
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ChatCompletionRequestMessage) MarshalJSON() ([]byte, error) {
	if u.SystemMessage != nil {
		return utils.MarshalJSON(u.SystemMessage, "", true)
	}

	if u.UserMessage != nil {
		return utils.MarshalJSON(u.UserMessage, "", true)
	}

	if u.AssistantMessage != nil {
		return utils.MarshalJSON(u.AssistantMessage, "", true)
	}

	if u.ToolMessage != nil {
		return utils.MarshalJSON(u.ToolMessage, "", true)
	}

	if u.FunctionMessage != nil {
		return utils.MarshalJSON(u.FunctionMessage, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
