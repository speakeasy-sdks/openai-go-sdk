// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateCompletionResponseChoicesFinishReason - The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// or `length` if the maximum number of tokens specified in the request was reached.
type CreateCompletionResponseChoicesFinishReason string

const (
	CreateCompletionResponseChoicesFinishReasonStop   CreateCompletionResponseChoicesFinishReason = "stop"
	CreateCompletionResponseChoicesFinishReasonLength CreateCompletionResponseChoicesFinishReason = "length"
)

func (e CreateCompletionResponseChoicesFinishReason) ToPointer() *CreateCompletionResponseChoicesFinishReason {
	return &e
}

func (e *CreateCompletionResponseChoicesFinishReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stop":
		fallthrough
	case "length":
		*e = CreateCompletionResponseChoicesFinishReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCompletionResponseChoicesFinishReason: %v", v)
	}
}

type CreateCompletionResponseChoicesLogprobs struct {
	TextOffset    []int64            `json:"text_offset,omitempty"`
	TokenLogprobs []float64          `json:"token_logprobs,omitempty"`
	Tokens        []string           `json:"tokens,omitempty"`
	TopLogprobs   []map[string]int64 `json:"top_logprobs,omitempty"`
}

func (o *CreateCompletionResponseChoicesLogprobs) GetTextOffset() []int64 {
	if o == nil {
		return nil
	}
	return o.TextOffset
}

func (o *CreateCompletionResponseChoicesLogprobs) GetTokenLogprobs() []float64 {
	if o == nil {
		return nil
	}
	return o.TokenLogprobs
}

func (o *CreateCompletionResponseChoicesLogprobs) GetTokens() []string {
	if o == nil {
		return nil
	}
	return o.Tokens
}

func (o *CreateCompletionResponseChoicesLogprobs) GetTopLogprobs() []map[string]int64 {
	if o == nil {
		return nil
	}
	return o.TopLogprobs
}

type CreateCompletionResponseChoices struct {
	// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
	// or `length` if the maximum number of tokens specified in the request was reached.
	//
	FinishReason CreateCompletionResponseChoicesFinishReason `json:"finish_reason"`
	Index        int64                                       `json:"index"`
	Logprobs     *CreateCompletionResponseChoicesLogprobs    `json:"logprobs"`
	Text         string                                      `json:"text"`
}

func (o *CreateCompletionResponseChoices) GetFinishReason() CreateCompletionResponseChoicesFinishReason {
	if o == nil {
		return CreateCompletionResponseChoicesFinishReason("")
	}
	return o.FinishReason
}

func (o *CreateCompletionResponseChoices) GetIndex() int64 {
	if o == nil {
		return 0
	}
	return o.Index
}

func (o *CreateCompletionResponseChoices) GetLogprobs() *CreateCompletionResponseChoicesLogprobs {
	if o == nil {
		return nil
	}
	return o.Logprobs
}

func (o *CreateCompletionResponseChoices) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

// CreateCompletionResponse - Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
type CreateCompletionResponse struct {
	// The list of completion choices the model generated for the input prompt.
	Choices []CreateCompletionResponseChoices `json:"choices"`
	// The Unix timestamp (in seconds) of when the completion was created.
	Created int64 `json:"created"`
	// A unique identifier for the completion.
	ID string `json:"id"`
	// The model used for completion.
	Model string `json:"model"`
	// The object type, which is always "text_completion"
	Object string `json:"object"`
	// Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

func (o *CreateCompletionResponse) GetChoices() []CreateCompletionResponseChoices {
	if o == nil {
		return []CreateCompletionResponseChoices{}
	}
	return o.Choices
}

func (o *CreateCompletionResponse) GetCreated() int64 {
	if o == nil {
		return 0
	}
	return o.Created
}

func (o *CreateCompletionResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateCompletionResponse) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *CreateCompletionResponse) GetObject() string {
	if o == nil {
		return ""
	}
	return o.Object
}

func (o *CreateCompletionResponse) GetUsage() *CompletionUsage {
	if o == nil {
		return nil
	}
	return o.Usage
}
