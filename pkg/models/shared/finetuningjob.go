// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v4/pkg/utils"
)

// Error - For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
type Error struct {
	// A machine-readable error code.
	Code string `json:"code"`
	// A human-readable error message.
	Message string `json:"message"`
	// The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
	Param *string `json:"param"`
}

func (o *Error) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *Error) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *Error) GetParam() *string {
	if o == nil {
		return nil
	}
	return o.Param
}

type FineTuningJob1 string

const (
	FineTuningJob1Auto FineTuningJob1 = "auto"
)

func (e FineTuningJob1) ToPointer() *FineTuningJob1 {
	return &e
}

func (e *FineTuningJob1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		*e = FineTuningJob1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FineTuningJob1: %v", v)
	}
}

type FineTuningJobNEpochsType string

const (
	FineTuningJobNEpochsTypeFineTuningJob1 FineTuningJobNEpochsType = "FineTuningJob_1"
	FineTuningJobNEpochsTypeInteger        FineTuningJobNEpochsType = "integer"
)

// FineTuningJobNEpochs - The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
type FineTuningJobNEpochs struct {
	FineTuningJob1 *FineTuningJob1
	Integer        *int64

	Type FineTuningJobNEpochsType
}

func CreateFineTuningJobNEpochsFineTuningJob1(fineTuningJob1 FineTuningJob1) FineTuningJobNEpochs {
	typ := FineTuningJobNEpochsTypeFineTuningJob1

	return FineTuningJobNEpochs{
		FineTuningJob1: &fineTuningJob1,
		Type:           typ,
	}
}

func CreateFineTuningJobNEpochsInteger(integer int64) FineTuningJobNEpochs {
	typ := FineTuningJobNEpochsTypeInteger

	return FineTuningJobNEpochs{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *FineTuningJobNEpochs) UnmarshalJSON(data []byte) error {

	fineTuningJob1 := FineTuningJob1("")
	if err := utils.UnmarshalJSON(data, &fineTuningJob1, "", true, true); err == nil {
		u.FineTuningJob1 = &fineTuningJob1
		u.Type = FineTuningJobNEpochsTypeFineTuningJob1
		return nil
	}

	integer := int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = FineTuningJobNEpochsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FineTuningJobNEpochs) MarshalJSON() ([]byte, error) {
	if u.FineTuningJob1 != nil {
		return utils.MarshalJSON(u.FineTuningJob1, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// FineTuningJobHyperparameters - The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
type FineTuningJobHyperparameters struct {
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
	// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
	NEpochs FineTuningJobNEpochs `json:"n_epochs"`
}

func (o *FineTuningJobHyperparameters) GetNEpochs() FineTuningJobNEpochs {
	if o == nil {
		return FineTuningJobNEpochs{}
	}
	return o.NEpochs
}

// FineTuningJobObject - The object type, which is always "fine_tuning.job".
type FineTuningJobObject string

const (
	FineTuningJobObjectFineTuningJob FineTuningJobObject = "fine_tuning.job"
)

func (e FineTuningJobObject) ToPointer() *FineTuningJobObject {
	return &e
}

func (e *FineTuningJobObject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fine_tuning.job":
		*e = FineTuningJobObject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FineTuningJobObject: %v", v)
	}
}

// Status - The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
type Status string

const (
	StatusValidatingFiles Status = "validating_files"
	StatusQueued          Status = "queued"
	StatusRunning         Status = "running"
	StatusSucceeded       Status = "succeeded"
	StatusFailed          Status = "failed"
	StatusCancelled       Status = "cancelled"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "validating_files":
		fallthrough
	case "queued":
		fallthrough
	case "running":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "cancelled":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// FineTuningJob - The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
type FineTuningJob struct {
	// The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int64 `json:"created_at"`
	// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
	Error *Error `json:"error"`
	// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`
	// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int64 `json:"finished_at"`
	// The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters FineTuningJobHyperparameters `json:"hyperparameters"`
	// The object identifier, which can be referenced in the API endpoints.
	ID string `json:"id"`
	// The base model that is being fine-tuned.
	Model string `json:"model"`
	// The object type, which is always "fine_tuning.job".
	Object FineTuningJobObject `json:"object"`
	// The organization that owns the fine-tuning job.
	OrganizationID string `json:"organization_id"`
	// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`
	// The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status Status `json:"status"`
	// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int64 `json:"trained_tokens"`
	// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`
	// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`
}

func (o *FineTuningJob) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *FineTuningJob) GetError() *Error {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *FineTuningJob) GetFineTunedModel() *string {
	if o == nil {
		return nil
	}
	return o.FineTunedModel
}

func (o *FineTuningJob) GetFinishedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.FinishedAt
}

func (o *FineTuningJob) GetHyperparameters() FineTuningJobHyperparameters {
	if o == nil {
		return FineTuningJobHyperparameters{}
	}
	return o.Hyperparameters
}

func (o *FineTuningJob) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FineTuningJob) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *FineTuningJob) GetObject() FineTuningJobObject {
	if o == nil {
		return FineTuningJobObject("")
	}
	return o.Object
}

func (o *FineTuningJob) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *FineTuningJob) GetResultFiles() []string {
	if o == nil {
		return []string{}
	}
	return o.ResultFiles
}

func (o *FineTuningJob) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *FineTuningJob) GetTrainedTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.TrainedTokens
}

func (o *FineTuningJob) GetTrainingFile() string {
	if o == nil {
		return ""
	}
	return o.TrainingFile
}

func (o *FineTuningJob) GetValidationFile() *string {
	if o == nil {
		return nil
	}
	return o.ValidationFile
}
