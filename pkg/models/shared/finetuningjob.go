// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// FineTuningJobError - For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
type FineTuningJobError struct {
	// A machine-readable error code.
	Code *string `json:"code,omitempty"`
	// A human-readable error message.
	Message *string `json:"message,omitempty"`
	// The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
	Param *string `json:"param,omitempty"`
}

func (o *FineTuningJobError) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *FineTuningJobError) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *FineTuningJobError) GetParam() *string {
	if o == nil {
		return nil
	}
	return o.Param
}

// FineTuningJobHyperparametersNEpochs1 - The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
// "Auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
type FineTuningJobHyperparametersNEpochs1 string

const (
	FineTuningJobHyperparametersNEpochs1Auto FineTuningJobHyperparametersNEpochs1 = "auto"
)

func (e FineTuningJobHyperparametersNEpochs1) ToPointer() *FineTuningJobHyperparametersNEpochs1 {
	return &e
}

func (e *FineTuningJobHyperparametersNEpochs1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		*e = FineTuningJobHyperparametersNEpochs1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FineTuningJobHyperparametersNEpochs1: %v", v)
	}
}

type FineTuningJobHyperparametersNEpochsType string

const (
	FineTuningJobHyperparametersNEpochsTypeFineTuningJobHyperparametersNEpochs1 FineTuningJobHyperparametersNEpochsType = "FineTuningJob_hyperparameters_n_epochs_1"
	FineTuningJobHyperparametersNEpochsTypeInteger                              FineTuningJobHyperparametersNEpochsType = "integer"
)

type FineTuningJobHyperparametersNEpochs struct {
	FineTuningJobHyperparametersNEpochs1 *FineTuningJobHyperparametersNEpochs1
	Integer                              *int64

	Type FineTuningJobHyperparametersNEpochsType
}

func CreateFineTuningJobHyperparametersNEpochsFineTuningJobHyperparametersNEpochs1(fineTuningJobHyperparametersNEpochs1 FineTuningJobHyperparametersNEpochs1) FineTuningJobHyperparametersNEpochs {
	typ := FineTuningJobHyperparametersNEpochsTypeFineTuningJobHyperparametersNEpochs1

	return FineTuningJobHyperparametersNEpochs{
		FineTuningJobHyperparametersNEpochs1: &fineTuningJobHyperparametersNEpochs1,
		Type:                                 typ,
	}
}

func CreateFineTuningJobHyperparametersNEpochsInteger(integer int64) FineTuningJobHyperparametersNEpochs {
	typ := FineTuningJobHyperparametersNEpochsTypeInteger

	return FineTuningJobHyperparametersNEpochs{
		Integer: &integer,
		Type:    typ,
	}
}

func (u *FineTuningJobHyperparametersNEpochs) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	fineTuningJobHyperparametersNEpochs1 := new(FineTuningJobHyperparametersNEpochs1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&fineTuningJobHyperparametersNEpochs1); err == nil {
		u.FineTuningJobHyperparametersNEpochs1 = fineTuningJobHyperparametersNEpochs1
		u.Type = FineTuningJobHyperparametersNEpochsTypeFineTuningJobHyperparametersNEpochs1
		return nil
	}

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = FineTuningJobHyperparametersNEpochsTypeInteger
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u FineTuningJobHyperparametersNEpochs) MarshalJSON() ([]byte, error) {
	if u.FineTuningJobHyperparametersNEpochs1 != nil {
		return json.Marshal(u.FineTuningJobHyperparametersNEpochs1)
	}

	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	return nil, nil
}

// FineTuningJobHyperparameters - The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
type FineTuningJobHyperparameters struct {
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
	// "Auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
	NEpochs *FineTuningJobHyperparametersNEpochs `json:"n_epochs,omitempty"`
}

func (o *FineTuningJobHyperparameters) GetNEpochs() *FineTuningJobHyperparametersNEpochs {
	if o == nil {
		return nil
	}
	return o.NEpochs
}

// FineTuningJob - The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
type FineTuningJob struct {
	// The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int64 `json:"created_at"`
	// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
	Error *FineTuningJobError `json:"error"`
	// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
	FineTunedModel *string `json:"fine_tuned_model"`
	// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
	FinishedAt *int64 `json:"finished_at,omitempty"`
	// The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters FineTuningJobHyperparameters `json:"hyperparameters"`
	// The object identifier, which can be referenced in the API endpoints.
	ID string `json:"id"`
	// The base model that is being fine-tuned.
	Model string `json:"model"`
	// The object type, which is always "fine_tuning.job".
	Object string `json:"object"`
	// The organization that owns the fine-tuning job.
	OrganizationID string `json:"organization_id"`
	// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`
	// The current status of the fine-tuning job, which can be either `created`, `pending`, `running`, `succeeded`, `failed`, or `cancelled`.
	Status string `json:"status"`
	// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
	TrainedTokens *int64 `json:"trained_tokens"`
	// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`
	// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
	ValidationFile *string `json:"validation_file"`
}

func (o *FineTuningJob) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *FineTuningJob) GetError() *FineTuningJobError {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *FineTuningJob) GetFineTunedModel() *string {
	if o == nil {
		return nil
	}
	return o.FineTunedModel
}

func (o *FineTuningJob) GetFinishedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.FinishedAt
}

func (o *FineTuningJob) GetHyperparameters() FineTuningJobHyperparameters {
	if o == nil {
		return FineTuningJobHyperparameters{}
	}
	return o.Hyperparameters
}

func (o *FineTuningJob) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *FineTuningJob) GetModel() string {
	if o == nil {
		return ""
	}
	return o.Model
}

func (o *FineTuningJob) GetObject() string {
	if o == nil {
		return ""
	}
	return o.Object
}

func (o *FineTuningJob) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *FineTuningJob) GetResultFiles() []string {
	if o == nil {
		return []string{}
	}
	return o.ResultFiles
}

func (o *FineTuningJob) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *FineTuningJob) GetTrainedTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.TrainedTokens
}

func (o *FineTuningJob) GetTrainingFile() string {
	if o == nil {
		return ""
	}
	return o.TrainingFile
}

func (o *FineTuningJob) GetValidationFile() *string {
	if o == nil {
		return nil
	}
	return o.ValidationFile
}
