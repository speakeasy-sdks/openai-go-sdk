// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/openai-go-sdk/v3/pkg/utils"
)

type OutputsType string

const (
	OutputsTypeRunStepDetailsToolCallsCodeOutputLogsObject  OutputsType = "RunStepDetailsToolCallsCodeOutputLogsObject"
	OutputsTypeRunStepDetailsToolCallsCodeOutputImageObject OutputsType = "RunStepDetailsToolCallsCodeOutputImageObject"
)

type Outputs struct {
	RunStepDetailsToolCallsCodeOutputLogsObject  *RunStepDetailsToolCallsCodeOutputLogsObject
	RunStepDetailsToolCallsCodeOutputImageObject *RunStepDetailsToolCallsCodeOutputImageObject

	Type OutputsType
}

func CreateOutputsRunStepDetailsToolCallsCodeOutputLogsObject(runStepDetailsToolCallsCodeOutputLogsObject RunStepDetailsToolCallsCodeOutputLogsObject) Outputs {
	typ := OutputsTypeRunStepDetailsToolCallsCodeOutputLogsObject

	return Outputs{
		RunStepDetailsToolCallsCodeOutputLogsObject: &runStepDetailsToolCallsCodeOutputLogsObject,
		Type: typ,
	}
}

func CreateOutputsRunStepDetailsToolCallsCodeOutputImageObject(runStepDetailsToolCallsCodeOutputImageObject RunStepDetailsToolCallsCodeOutputImageObject) Outputs {
	typ := OutputsTypeRunStepDetailsToolCallsCodeOutputImageObject

	return Outputs{
		RunStepDetailsToolCallsCodeOutputImageObject: &runStepDetailsToolCallsCodeOutputImageObject,
		Type: typ,
	}
}

func (u *Outputs) UnmarshalJSON(data []byte) error {

	runStepDetailsToolCallsCodeOutputLogsObject := RunStepDetailsToolCallsCodeOutputLogsObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsCodeOutputLogsObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsCodeOutputLogsObject = &runStepDetailsToolCallsCodeOutputLogsObject
		u.Type = OutputsTypeRunStepDetailsToolCallsCodeOutputLogsObject
		return nil
	}

	runStepDetailsToolCallsCodeOutputImageObject := RunStepDetailsToolCallsCodeOutputImageObject{}
	if err := utils.UnmarshalJSON(data, &runStepDetailsToolCallsCodeOutputImageObject, "", true, true); err == nil {
		u.RunStepDetailsToolCallsCodeOutputImageObject = &runStepDetailsToolCallsCodeOutputImageObject
		u.Type = OutputsTypeRunStepDetailsToolCallsCodeOutputImageObject
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Outputs) MarshalJSON() ([]byte, error) {
	if u.RunStepDetailsToolCallsCodeOutputLogsObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsCodeOutputLogsObject, "", true)
	}

	if u.RunStepDetailsToolCallsCodeOutputImageObject != nil {
		return utils.MarshalJSON(u.RunStepDetailsToolCallsCodeOutputImageObject, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// CodeInterpreter - The Code Interpreter tool call definition.
type CodeInterpreter struct {
	// The input to the Code Interpreter tool call.
	Input string `json:"input"`
	// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
	Outputs []Outputs `json:"outputs"`
}

func (o *CodeInterpreter) GetInput() string {
	if o == nil {
		return ""
	}
	return o.Input
}

func (o *CodeInterpreter) GetOutputs() []Outputs {
	if o == nil {
		return []Outputs{}
	}
	return o.Outputs
}

// RunStepDetailsToolCallsCodeObjectType - The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type RunStepDetailsToolCallsCodeObjectType string

const (
	RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter RunStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

func (e RunStepDetailsToolCallsCodeObjectType) ToPointer() *RunStepDetailsToolCallsCodeObjectType {
	return &e
}

func (e *RunStepDetailsToolCallsCodeObjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code_interpreter":
		*e = RunStepDetailsToolCallsCodeObjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunStepDetailsToolCallsCodeObjectType: %v", v)
	}
}

// RunStepDetailsToolCallsCodeObject - Details of the Code Interpreter tool call the run step was involved in.
type RunStepDetailsToolCallsCodeObject struct {
	// The Code Interpreter tool call definition.
	CodeInterpreter CodeInterpreter `json:"code_interpreter"`
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
	Type RunStepDetailsToolCallsCodeObjectType `json:"type"`
}

func (o *RunStepDetailsToolCallsCodeObject) GetCodeInterpreter() CodeInterpreter {
	if o == nil {
		return CodeInterpreter{}
	}
	return o.CodeInterpreter
}

func (o *RunStepDetailsToolCallsCodeObject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RunStepDetailsToolCallsCodeObject) GetType() RunStepDetailsToolCallsCodeObjectType {
	if o == nil {
		return RunStepDetailsToolCallsCodeObjectType("")
	}
	return o.Type
}
